{
  "agentTemplates": [
    {
      "agentTypeName": "root",
      "statusNames": [
        "DEFAULT_UNKNOWN"
      ],
      "statusValues": [
        -1
      ],
      "agentProperties": [
        {
          "propertyName": "agents",
          "propertyType": "ArrayList"
        },
        {
          "propertyName": "historicalInfection",
          "propertyType": "ArrayList"
        },
        {
          "propertyName": "residentPopulation",
          "propertyType": "Integer"
        },
        {
          "propertyName": "startCountyIndex",
          "propertyType": "Integer"
        },
        {
          "propertyName": "endCountyIndex",
          "propertyType": "Integer"
        },
        {
          "propertyName": "counter",
          "propertyType": "Integer"
        }
      ],
      "constructor": {
        "javaScript": {
          "script": "import COVID_AgentBasedSimulation.Model.Data.CovidCsseJhu.CovidCsseJhu;\nimport COVID_AgentBasedSimulation.Model.AgentBasedModel.AgentBasedModel;\nimport COVID_AgentBasedSimulation.Model.AgentBasedModel.Agent;\nimport COVID_AgentBasedSimulation.Model.Structure.CensusBlockGroup;\nimport COVID_AgentBasedSimulation.Model.Data.Safegraph.PatternsRecordProcessed;\nimport COVID_AgentBasedSimulation.Model.MainModel;\nimport COVID_AgentBasedSimulation.Model.Data.Safegraph.CensusBlockGroupIntegerTuple;\nimport COVID_AgentBasedSimulation.Model.Structure.Country;\nimport COVID_AgentBasedSimulation.Model.Structure.State;\nimport COVID_AgentBasedSimulation.Model.Structure.County;\nimport COVID_AgentBasedSimulation.Model.Structure.City;\nimport COVID_AgentBasedSimulation.Model.Structure.CensusTract;\nimport COVID_AgentBasedSimulation.Model.AgentBasedModel.AgentTemplate;\nimport groovy.transform.CompileStatic\nimport esmaieeli.utilities.taskThreading.ParallelProcessor;\nimport COVID_AgentBasedSimulation.Model.Data.CovidCsseJhu.DailyConfirmedCases;\nimport java.time.ZonedDateTime;\n\nenum statusEnum{\n\tSUSCEPTIBLE, EXPOSED, INFECTED_SYM, INFECTED_ASYM, RECOVERED, DEAD;\n}\n\n\nprintln(\"ROOT CONSTRUCTOR: \"+Math.random());\n\nArrayList patternRecords\u003dmodelRoot.getSafegraph().getAllPatterns().getMonthlyPatternsList().get(0).getPatternRecords();\n\nint numAllVisits \u003d getGeneralInformation(patternRecords);\n\nlong start \u003d System.currentTimeMillis();\nint numAgents\u003d2500;\n\nArrayList cBGsList\u003dmakeCBGs(modelRoot);\nprintln(\"CBG size: \"+cBGsList.size());\n\nrunGenPeople(numAgents,modelRoot,patternRecords,numAllVisits,cBGsList);\n//runGenPeopleSerially(numAgents,modelRoot,patternRecords,numAllVisits,cBGsList);\n\nlong end \u003d System.currentTimeMillis();\nSystem.out.println(\"Generating people elapsed time: \" + (end - start) + \" miliSeconds.\");\n\nSystem.out.println(\"Initially infect people:\");\nstart \u003d System.currentTimeMillis();\ninitialInfectPeople(modelRoot,cBGsList);\nend \u003d System.currentTimeMillis();\nSystem.out.println(\"Finished infecting people: \" + (end - start) + \" miliSeconds.\");\n\n\ntry {\n\tString data \u003d \"Date,Susceptible,Exposed,Infected_sym,Infected_asym,Recovered,Dead,UNKNOWN,SimulatedInfectedToPop,REALInfected,RealInfectedToPop\\n\";\n     File f1 \u003d new File(\"./output.csv\");\n     if(!f1.exists()) {\n        f1.createNewFile();\n     }\n\n     FileWriter fileWritter \u003d new FileWriter(f1.getName(),false);\n     BufferedWriter bw \u003d new BufferedWriter(fileWritter);\n     bw.write(data);\n     bw.close();\n     System.out.println(\"Done\");\n} catch(IOException e){\n      e.printStackTrace();\n}\n\n\nArrayList\u003cDailyConfirmedCases\u003e dailyConfirmedCases\u003d((CovidCsseJhu)(modelRoot.covidCsseJhu)).dailyConfirmedCasesList;\nif(((AgentBasedModel)(modelRoot.getABM())).studyScopeGeography instanceof County){\n\t\n}else if(((AgentBasedModel)(modelRoot.getABM())).studyScopeGeography instanceof State){\n\tState scope\u003d(State)(((AgentBasedModel)(modelRoot.getABM())).studyScopeGeography);\n\tscopePopulation\u003dscope.getPopulation();\n\tfor(int j\u003d0;j\u003c((ArrayList\u003cCounty\u003e)(scope.getCounties())).size();j++){\n\t\tfor(int d\u003d0;d\u003cdailyConfirmedCases.size();d++){\n\t\t\tif(((String)(((State)(((County)(((DailyConfirmedCases)(dailyConfirmedCases.get(d))).getCounty())).getState())).getName())).equals(scope.getName())){\n\t\t\t\tif(((County)(((ArrayList\u003cCounty\u003e)(scope.getCounties())).get(j))).getId()\u003d\u003d((County)(((DailyConfirmedCases)(dailyConfirmedCases.get(d))).getCounty())).getId()){\n\t\t\t\t\tif(((ZonedDateTime)(((ZonedDateTime)(((AgentBasedModel)(modelRoot.getABM())).getCurrentTime())).truncatedTo(ChronoUnit.DAYS))).equals(((ZonedDateTime)(((DailyConfirmedCases)(dailyConfirmedCases.get(d))).getDate())))\u003d\u003dtrue){\n\t\t\t\t\t\tnumActiveInfected\u003dnumActiveInfected+((DailyConfirmedCases)(dailyConfirmedCases.get(d))).getNumActiveCases();\n\t\t\t\t\t\t//println(d);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}else if(((AgentBasedModel)(modelRoot.getABM())).studyScopeGeography instanceof Country){\n\tSystem.out.println(\"Infection for country level not implemented yet!\");\n}else if(((AgentBasedModel)(modelRoot.getABM())).studyScopeGeography instanceof City){\n\tCity scope\u003d(City)(((AgentBasedModel)(modelRoot.getABM())).studyScopeGeography);\n\tscopePopulation\u003dscope.getPopulation();\n\tboolean hasStarted\u003dfalse;\n\tboolean hasEnded\u003dfalse;\n\tfor(int d\u003d0;d\u003cdailyConfirmedCases.size();d++){\n\t\tif(((String)(((State)(((County)(((DailyConfirmedCases)(dailyConfirmedCases.get(d))).getCounty())).getState())).getName())).equals(((State)(((CensusTract)(((ArrayList\u003cCensusTract\u003e)(scope.getCensusTracts())).get(0))).getState())).getName())){\n\t\t\tif(((County)(((CensusTract)(((ArrayList\u003cCensusTract\u003e)(scope.getCensusTracts())).get(0))).getCounty())).getId()\u003d\u003d((County)(((DailyConfirmedCases)(dailyConfirmedCases.get(d))).getCounty())).getId()){\n\t\t\t\tif(hasStarted\u003d\u003dfalse){\n\t\t\t\t\tprintln(\"STARTED!\");\n\t\t\t\t\tcurrentAgent.setPropertyValue(\"startCountyIndex\",d);\n\t\t\t\t\thasStarted\u003dtrue;\n\t\t\t\t}\n\t\t\t}else{\n\t\t\t\tif(hasStarted\u003d\u003dtrue){\n\t\t\t\t\tcurrentAgent.setPropertyValue(\"endCountyIndex\",d);\n\t\t\t\t\thasEnded\u003dtrue;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}else{\n\t\t\tif(hasStarted\u003d\u003dtrue){\n\t\t\t\tcurrentAgent.setPropertyValue(\"endCountyIndex\",d);\n\t\t\t\thasEnded\u003dtrue;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n}else{\n\tSystem.out.println(\"Infection for less than county level not implemented yet!\");\n}\n\ncurrentAgent.setPropertyValue(\"counter\",0);\n\n\n\n\n\n\n@CompileStatic\nint getGeneralInformation(ArrayList patternRecords){\n\t//GET ALL NUM PEOPLE (VISITS)\n\tprintln(\"one pass on all patterns to detect number of people ...\");\n\tint numAllVisits\u003d0;\n\tfor(int i\u003d0;i\u003cpatternRecords.size();i++){\n\t\tnumAllVisits\u003dnumAllVisits+((PatternsRecordProcessed)patternRecords.get(i)).getRaw_visitor_counts();\n\t\t//println(\"lat: \"+patternRecords.get(i).getPlace().getLat());\n\t\t//println(\"lon: \"+patternRecords.get(i).getPlace().getLon());\n\t}\n\tprintln(\"numAllVisits: \"+numAllVisits);\n\treturn numAllVisits;\n}\n\nArrayList makeCBGs(MainModel modelRoot){\n\tArrayList cBGsListRaw\u003dmodelRoot.getSafegraph().getCBGsFromCaseStudy(modelRoot.getABM().getStudyScopeGeography());\n\tArrayList cBGsList\u003dnew ArrayList();\n\tfor(int i\u003d0;i\u003ccBGsListRaw.size();i++){\n\t\tAgent agent\u003dmodelRoot.getABM().makeAgent(\"CBG\");\n\t\tagent.setPropertyValue(\"cbgVal\",cBGsListRaw.get(i));\n\t\tagent.setPropertyValue(\"lat\",cBGsListRaw.get(i).getLat());\n\t\tagent.setPropertyValue(\"lon\",cBGsListRaw.get(i).getLon());\n\t\tagent.setPropertyValue(\"N\",0);\n\t\tagent.setPropertyValue(\"S\",0);\n\t\tagent.setPropertyValue(\"E\",0);\n\t\tagent.setPropertyValue(\"IS\",0);\n\t\tagent.setPropertyValue(\"IAS\",0);\n\t\tagent.setPropertyValue(\"R\",0);\n\t\tcBGsList.add(agent);\n\t}\n\treturn cBGsList;\n}\n\n\n@CompileStatic\npublic class ParallelAgentGenerator extends ParallelProcessor {\n\n\tpublic int threadIndex;\n\tpublic int numAllVisits;\n\tpublic MainModel modelRoot;\n\tpublic ArrayList patternRecords;\n\tpublic ArrayList cBGs;\n\n\t\n\n\t@CompileStatic\n\tpublic ParallelAgentGenerator(int passed_threadIndex, int passed_numAllVisits, MainModel passed_modelRoot, ArrayList passed_patternRecords, Object parent, Object data, ArrayList passed_cBGs, int startIndex, int endIndex) {\n\t\tsuper(parent, data, startIndex, endIndex);\n\t\tthreadIndex\u003dpassed_threadIndex;\n\t\tnumAllVisits\u003dpassed_numAllVisits;\n\t\tmodelRoot\u003dpassed_modelRoot;\n\t\tpatternRecords\u003dpassed_patternRecords;\n\t\tcBGs\u003dpassed_cBGs;\n\t\tmyThread \u003d new Thread(new Runnable() {\n            @Override\n            @CompileStatic\n            public void run() {\n            \tprintln(\"generate people\");\n            \trunParallel(modelRoot,patternRecords,numAllVisits,cBGs,startIndex,endIndex,threadIndex);\n            }\n\t\t});\n\t}\n\n\n@CompileStatic\ndef runParallel(MainModel modelRoot, ArrayList patternRecords, int numAllVisits, ArrayList cBGs, int startIndex, int endIndex, int threadIndex){\n\nprintln(\"generate people\");\nfor(int i\u003dstartIndex;i\u003cendIndex;i++){\n\tint cumulativeNumPeopleIndex\u003d(int)((Math.random()*(numAllVisits-1)));\n\t//println(\"cumulativeNumPeopleIndex: \"+cumulativeNumPeopleIndex);\n\tint cumulativeNumPeople\u003d0;\n\tint selectedIndex\u003d-1;\n\tfor(int k\u003d0;k\u003cpatternRecords.size();k++){\n\t\tcumulativeNumPeople\u003dcumulativeNumPeople+((PatternsRecordProcessed)(patternRecords.get(k))).getRaw_visitor_counts();\n\t\t//println(\"cumulativeNumPeople: \"+cumulativeNumPeople);\n\t\tif(cumulativeNumPeople\u003e\u003dcumulativeNumPeopleIndex){\n\t\t\tif(((PatternsRecordProcessed)(patternRecords.get(k))).getVisitor_home_cbgs_place()!\u003dnull){\n\t\t\t\tselectedIndex\u003dk;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t}\n\t}\n\t//println(\"selectedIndex: \"+selectedIndex);\n\tAgent agent\u003dmodelRoot.getABM().makeAgent(\"Person\");\n\n\tprintln(\"AGENT GET INDEX: \"+agent.getMyIndex());\n\t\n\tagent.setPropertyValue(\"isAtWork\",false);\n\t\n\t//\\/\\/\\/ Select home of agent\n\tint numAllPeopleHomes\u003d0;\n\tfor(int j\u003d0;j\u003c((ArrayList)((PatternsRecordProcessed)(patternRecords.get(selectedIndex))).getVisitor_home_cbgs_place()).size();j++){\n\t\tnumAllPeopleHomes\u003dnumAllPeopleHomes+((Integer)((CensusBlockGroupIntegerTuple)(((ArrayList)((PatternsRecordProcessed)(patternRecords.get(selectedIndex))).getVisitor_home_cbgs_place()).get(j))).getValue());\n\t}\n\tint cumulativePeopleHomesIndex\u003d(int)((Math.random()*(numAllPeopleHomes-1)));\n\tcumulativeNumPeople\u003d0;\n\tCensusBlockGroup selectedCBG\u003dnull;\n\tfor(int j\u003d0;j\u003c((ArrayList)((PatternsRecordProcessed)(patternRecords.get(selectedIndex))).getVisitor_home_cbgs_place()).size();j++){\n\t\tcumulativeNumPeople\u003dcumulativeNumPeople+((Integer)((CensusBlockGroupIntegerTuple)((ArrayList)((PatternsRecordProcessed)(patternRecords.get(selectedIndex))).getVisitor_home_cbgs_place()).get(j)).getValue());\n\t\tif(cumulativeNumPeople\u003e\u003dcumulativePeopleHomesIndex){\n\t\t\t//println(\"j: \"+j);\n\t\t\tselectedCBG\u003d((CensusBlockGroup)((CensusBlockGroupIntegerTuple)((ArrayList)((PatternsRecordProcessed)(patternRecords.get(selectedIndex))).getVisitor_home_cbgs_place()).get(j)).getKey());\n\t\t\tbreak;\n\t\t}\n\t}\n\tif(selectedCBG\u003d\u003dnull){\n\t\tprintln(\"SEVERE ERROR: HOME CENSUS BLOCK NOT FOUND!\");\n\t}\n\tagent.setPropertyValue(\"home\",selectedCBG);\n\n\t//println(\"@@@\");\n\tfor(int n\u003d0;n\u003ccBGs.size();n++){\n\t\t//println(\"%%%\");\n\t\tif(((CensusBlockGroup)selectedCBG).getId()\u003d\u003d((CensusBlockGroup)(((Agent)(cBGs.get(n))).getPropertyValue(\"cbgVal\"))).getId()){\n\t\t\t((Agent)(cBGs.get(n))).setPropertyValue(\"N\",(int)(((Agent)(cBGs.get(n))).getPropertyValue(\"N\"))+1);\n\t\t\t((Agent)(cBGs.get(n))).setPropertyValue(\"S\",(int)(((Agent)(cBGs.get(n))).getPropertyValue(\"S\"))+1);\n\t\t\tagent.setPropertyValue(\"cBG\",cBGs.get(n));\n\t\t\t//println(\"AGENT CBG SET: \"+agent.getMyIndex());\n\t\t\t//println(\"AGENT IN THREAD: \"+threadIndex);\n\t\t\tbreak;\n\t\t}\n\t}\n\t//println(\"###\");\n\t//^^^ Select home of agent\n\n\t//\\/\\/\\/ Select daytime cbg of agent\n\tint numAllPeopleWorkplaces\u003d0;\n\tif(((ArrayList)((PatternsRecordProcessed)(patternRecords.get(selectedIndex))).getVisitor_daytime_cbgs_place())!\u003dnull){\n\t\tfor(int j\u003d0;j\u003c((ArrayList)((PatternsRecordProcessed)(patternRecords.get(selectedIndex))).getVisitor_daytime_cbgs_place()).size();j++){\n\t\t\tnumAllPeopleWorkplaces\u003dnumAllPeopleWorkplaces+((Integer)((CensusBlockGroupIntegerTuple)(((ArrayList)((PatternsRecordProcessed)(patternRecords.get(selectedIndex))).getVisitor_daytime_cbgs_place()).get(j))).getValue());\n\t\t}\n\t\tint cumulativePeopleDaytimeIndex\u003d(int)((Math.random()*(numAllPeopleWorkplaces-1)));\n\t\tcumulativeNumPeople\u003d0;\n\t\tselectedCBG\u003dnull;\n\t\tfor(int j\u003d0;j\u003c((ArrayList)((PatternsRecordProcessed)(patternRecords.get(selectedIndex))).getVisitor_daytime_cbgs_place()).size();j++){\n\t\t\tcumulativeNumPeople\u003dcumulativeNumPeople+((Integer)((CensusBlockGroupIntegerTuple)((ArrayList)((PatternsRecordProcessed)(patternRecords.get(selectedIndex))).getVisitor_daytime_cbgs_place()).get(j)).getValue());\n\t\t\tif(cumulativeNumPeople\u003e\u003dcumulativePeopleHomesIndex){\n\t\t\t\t//println(\"j: \"+j);\n\t\t\t\tselectedCBG\u003d((CensusBlockGroup)((CensusBlockGroupIntegerTuple)((ArrayList)((PatternsRecordProcessed)(patternRecords.get(selectedIndex))).getVisitor_daytime_cbgs_place()).get(j)).getKey());\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(selectedCBG\u003d\u003dnull){\n\t\t\tprintln(\"KNOWN EXCEPTION: DAYTIME CENSUS BLOCK NOT FOUND!\");\n\t\t\tprintln(\"USING HOME AS WORK CENSUS BLOCK\");\n\t\t\tselectedCBG\u003d(CensusBlockGroup)(agent.getPropertyValue(\"home\"));\n\t\t}\n\t}else{\n\t\tif(selectedCBG\u003d\u003dnull){\n\t\t\tprintln(\"KNOWN EXCEPTION: DAYTIME CENSUS BLOCK NOT FOUND!\");\n\t\t\tprintln(\"USING HOME AS WORK CENSUS BLOCK\");\n\t\t\tselectedCBG\u003d(CensusBlockGroup)(agent.getPropertyValue(\"home\"));\n\t\t}\n\t}\n\t\n\t\n\tagent.setPropertyValue(\"dayCBG\",selectedCBG);\n\t//^^^ Select daytime cbg of agent\n\n\t\n\t//println(\"lat: \"+selectedCBG.getLat());\n\t//println(\"lon: \"+selectedCBG.getLon());\n\tagent.setPropertyValue(\"status\",statusEnum.SUSCEPTIBLE.ordinal());\n\tagent.setPropertyValue(\"minutesSick\",-1);\n\tagent.setPropertyValue(\"minutesTravelToWorkFrom7\",-1);\n\tagent.setPropertyValue(\"minutesTravelFromWorkFrom16\",-1);\n\tagent.setPropertyValue(\"currentLocation\",agent.getPropertyValue(\"home\"));\n\t//println(agent.getPropertyValue(\"currentLocation\").getState().getName());\n\tagent.setPropertyValue(\"lat\",((CensusBlockGroup)(agent.getPropertyValue(\"currentLocation\"))).getLat());\n\tagent.setPropertyValue(\"lon\",((CensusBlockGroup)(agent.getPropertyValue(\"currentLocation\"))).getLon());\n\t\n\t\n\n\t//println(\"lat: \"+agent.getPropertyValue(\"currentLocation\").getLat());\n\t//println(\"lon: \"+agent.getPropertyValue(\"currentLocation\").getLon());\n\t\n\tArrayList destinationPlaces\u003dnew ArrayList();\n\tArrayList destinationPlacesFreq\u003dnew ArrayList();\n\n\t//println(\"\u0026\u0026\u0026\u0026\");\n\tfor(int j\u003d0;j\u003cpatternRecords.size();j++){\n\t\tif(((PatternsRecordProcessed)(patternRecords.get(j))).getVisitor_home_cbgs_place()!\u003dnull){\n\t\t\tfor(int k\u003d0;k\u003c((ArrayList)(((PatternsRecordProcessed)(patternRecords.get(j))).getVisitor_home_cbgs_place())).size();k++){\n\t\t\t\tif(((CensusBlockGroup)(agent.getPropertyValue(\"home\"))).id\u003d\u003d((CensusBlockGroup)((CensusBlockGroupIntegerTuple)((ArrayList)((PatternsRecordProcessed)(patternRecords.get(j))).getVisitor_home_cbgs_place()).get(k)).getKey()).getId()){\n\t\t\t\t\tdestinationPlaces.add(((PatternsRecordProcessed)(patternRecords.get(j))));\n\t\t\t\t\tdestinationPlacesFreq.add(((CensusBlockGroupIntegerTuple)(((ArrayList)(((PatternsRecordProcessed)(patternRecords.get(j))).getVisitor_home_cbgs_place())).get(k))).getValue());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tagent.setPropertyValue(\"destinationPlaces\",destinationPlaces);\n\tagent.setPropertyValue(\"destinationPlacesFreq\",destinationPlacesFreq);\n\tagent.setPropertyValue(\"travelStartDecisionCounter\",new Integer(0));\n\tagent.setPropertyValue(\"dstIndex\",new Integer(-1));//THIS IS USED TO DETECT IF THE PERSON IS AT HOME OR NOT\n\n\tint cumulativeDestinationFreqs\u003d0;\n\tfor(int k\u003d0;k\u003cdestinationPlacesFreq.size();k++){\n\t\tcumulativeDestinationFreqs\u003dcumulativeDestinationFreqs+(Integer)(destinationPlacesFreq.get(k));\n\t}\n\tagent.setPropertyValue(\"cumulativeDestinationFreqs\",new Integer(cumulativeDestinationFreqs));\n}\n}\n\n\t\n}\n\n@CompileStatic\ndef runGenPeople(int numAgents, MainModel modelRoot, ArrayList patternRecords, int numAllVisits, ArrayList cBGs){\n//int numAgents\u003d1000;\n//SAMPLE FROM PATTERNS\n\n\n\n\nint numProcessors \u003d modelRoot.getNumCPUs();\nif (numProcessors \u003e Runtime.getRuntime().availableProcessors()) {\n\tnumProcessors \u003d Runtime.getRuntime().availableProcessors();\n}\nParallelAgentGenerator[] parallelAgentGenerator \u003d new ParallelAgentGenerator[numProcessors];\n\nfor (int i \u003d 0; i \u003c numProcessors - 1; i++) {\n\tparallelAgentGenerator[i] \u003d new ParallelAgentGenerator(i, numAllVisits, modelRoot, patternRecords, null, null, cBGs, (int) Math.floor((double)(i * ((numAgents) / numProcessors))), (int) Math.floor((double)((i + 1) * ((numAgents) / numProcessors))));\n}\nparallelAgentGenerator[numProcessors - 1] \u003d new ParallelAgentGenerator(numProcessors-1, numAllVisits, modelRoot, patternRecords, null,null, cBGs, (int) Math.floor((double)((numProcessors - 1) * ((numAgents) / numProcessors))), numAgents);\n\n//for (int i \u003d 0; i \u003c numProcessors; i++) {\n//\tparallelAgentGenerator[i].myThread \u003d new Thread(new Runnable() {\n//            @Override\n//            public void run() {\n//            \tprintln(\"generate people ***\");\n//            \trunInternally(i, modelRoot,patternRecords,numAllVisits,parallelAgentGenerator[i].myStartIndex,parallelAgentGenerator[i].myEndIndex);\n//            }\n//\t});\n//}\n\nfor (int i \u003d 0; i \u003c numProcessors; i++) {\n\tparallelAgentGenerator[i].myThread.start();\n\tSystem.out.println(\"thread \" + i + \" started!\");\n}\nfor (int i \u003d 0; i \u003c numProcessors; i++) {\n\ttry {\n\t\tprintln(\"####\");\n\t\tparallelAgentGenerator[i].myThread.join();\n\t\tSystem.out.println(\"thread \" + i + \" finished for records: \" + parallelAgentGenerator[i].myStartIndex + \" | \" + parallelAgentGenerator[i].myEndIndex);\n\t} catch (InterruptedException ie) {\n\t\tSystem.out.println(ie.toString());\n\t}\n}\n\n}\n\n\n\n\n\n@CompileStatic\ndef runGenPeopleSerially(int numAgents, MainModel modelRoot, ArrayList patternRecords, int numAllVisits, ArrayList cBGs){\n\n//int numAgents\u003d1000;\n\nprintln(\"generate people\");\nfor(int i\u003d0;i\u003cnumAgents;i++){\n\tint cumulativeNumPeopleIndex\u003d(int)((Math.random()*(numAllVisits-1)));\n\t//println(\"cumulativeNumPeopleIndex: \"+cumulativeNumPeopleIndex);\n\tint cumulativeNumPeople\u003d0;\n\tint selectedIndex\u003d-1;\n\tfor(int k\u003d0;k\u003cpatternRecords.size();k++){\n\t\tcumulativeNumPeople\u003dcumulativeNumPeople+((PatternsRecordProcessed)(patternRecords.get(k))).getRaw_visitor_counts();\n\t\t//println(\"cumulativeNumPeople: \"+cumulativeNumPeople);\n\t\tif(cumulativeNumPeople\u003e\u003dcumulativeNumPeopleIndex){\n\t\t\tif(((PatternsRecordProcessed)(patternRecords.get(k))).getVisitor_home_cbgs_place()!\u003dnull){\n\t\t\t\tselectedIndex\u003dk;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t}\n\t}\n\t//println(\"selectedIndex: \"+selectedIndex);\n\tAgent agent\u003dmodelRoot.getABM().makeAgent(\"Person\");\n\tagent.setPropertyValue(\"isAtWork\",false);\n\t\n\t//\\/\\/\\/ Select home of agent\n\tint numAllPeopleHomes\u003d0;\n\tfor(int j\u003d0;j\u003c((ArrayList)((PatternsRecordProcessed)(patternRecords.get(selectedIndex))).getVisitor_home_cbgs_place()).size();j++){\n\t\tnumAllPeopleHomes\u003dnumAllPeopleHomes+((Integer)((CensusBlockGroupIntegerTuple)(((ArrayList)((PatternsRecordProcessed)(patternRecords.get(selectedIndex))).getVisitor_home_cbgs_place()).get(j))).getValue());\n\t}\n\tint cumulativePeopleHomesIndex\u003d(int)((Math.random()*(numAllPeopleHomes-1)));\n\tcumulativeNumPeople\u003d0;\n\tCensusBlockGroup selectedCBG\u003dnull;\n\tfor(int j\u003d0;j\u003c((ArrayList)((PatternsRecordProcessed)(patternRecords.get(selectedIndex))).getVisitor_home_cbgs_place()).size();j++){\n\t\tcumulativeNumPeople\u003dcumulativeNumPeople+((Integer)((CensusBlockGroupIntegerTuple)((ArrayList)((PatternsRecordProcessed)(patternRecords.get(selectedIndex))).getVisitor_home_cbgs_place()).get(j)).getValue());\n\t\tif(cumulativeNumPeople\u003e\u003dcumulativePeopleHomesIndex){\n\t\t\t//println(\"j: \"+j);\n\t\t\tselectedCBG\u003d((CensusBlockGroup)((CensusBlockGroupIntegerTuple)((ArrayList)((PatternsRecordProcessed)(patternRecords.get(selectedIndex))).getVisitor_home_cbgs_place()).get(j)).getKey());\n\t\t\tbreak;\n\t\t}\n\t}\n\tif(selectedCBG\u003d\u003dnull){\n\t\tprintln(\"SEVERE ERROR: HOME CENSUS BLOCK NOT FOUND!\");\n\t}\n\tagent.setPropertyValue(\"home\",selectedCBG);\n\n\t//println(\"@@@\");\n\tfor(int n\u003d0;n\u003ccBGs.size();n++){\n\t\t//println(\"%%%\");\n\t\tif(((CensusBlockGroup)selectedCBG).getId()\u003d\u003d((CensusBlockGroup)(((Agent)(cBGs.get(n))).getPropertyValue(\"cbgVal\"))).getId()){\n\t\t\t((Agent)(cBGs.get(n))).setPropertyValue(\"N\",(int)(((Agent)(cBGs.get(n))).getPropertyValue(\"N\"))+1);\n\t\t\t((Agent)(cBGs.get(n))).setPropertyValue(\"S\",(int)(((Agent)(cBGs.get(n))).getPropertyValue(\"S\"))+1);\n\t\t\tagent.setPropertyValue(\"cBG\",cBGs.get(n));\n\t\t\tprintln(\"AGENT CBG SET: \"+agent.getMyIndex());\n\t\t\tbreak;\n\t\t}\n\t}\n\t//println(\"###\");\n\t\n\t//^^^ Select home of agent\n\n\t//\\/\\/\\/ Select daytime cbg of agent\n\tint numAllPeopleWorkplaces\u003d0;\n\tfor(int j\u003d0;j\u003c((ArrayList)((PatternsRecordProcessed)(patternRecords.get(selectedIndex))).getVisitor_daytime_cbgs_place()).size();j++){\n\t\tnumAllPeopleWorkplaces\u003dnumAllPeopleWorkplaces+((Integer)((CensusBlockGroupIntegerTuple)(((ArrayList)((PatternsRecordProcessed)(patternRecords.get(selectedIndex))).getVisitor_daytime_cbgs_place()).get(j))).getValue());\n\t}\n\tint cumulativePeopleDaytimeIndex\u003d(int)((Math.random()*(numAllPeopleWorkplaces-1)));\n\tcumulativeNumPeople\u003d0;\n\tselectedCBG\u003dnull;\n\tfor(int j\u003d0;j\u003c((ArrayList)((PatternsRecordProcessed)(patternRecords.get(selectedIndex))).getVisitor_daytime_cbgs_place()).size();j++){\n\t\tcumulativeNumPeople\u003dcumulativeNumPeople+((Integer)((CensusBlockGroupIntegerTuple)((ArrayList)((PatternsRecordProcessed)(patternRecords.get(selectedIndex))).getVisitor_daytime_cbgs_place()).get(j)).getValue());\n\t\tif(cumulativeNumPeople\u003e\u003dcumulativePeopleHomesIndex){\n\t\t\t//println(\"j: \"+j);\n\t\t\tselectedCBG\u003d((CensusBlockGroup)((CensusBlockGroupIntegerTuple)((ArrayList)((PatternsRecordProcessed)(patternRecords.get(selectedIndex))).getVisitor_daytime_cbgs_place()).get(j)).getKey());\n\t\t\tbreak;\n\t\t}\n\t}\n\tif(selectedCBG\u003d\u003dnull){\n\t\tprintln(\"SEVERE ERROR: DAYTIME CENSUS BLOCK NOT FOUND!\");\n\t}\n\tagent.setPropertyValue(\"dayCBG\",selectedCBG);\n\t//^^^ Select daytime cbg of agent\n\n\t\n\t//println(\"lat: \"+selectedCBG.getLat());\n\t//println(\"lon: \"+selectedCBG.getLon());\n\tagent.setPropertyValue(\"status\",statusEnum.SUSCEPTIBLE.ordinal());\n\tagent.setPropertyValue(\"minutesSick\",-1);\n\tagent.setPropertyValue(\"minutesTravelToWorkFrom7\",-1);\n\tagent.setPropertyValue(\"minutesTravelFromWorkFrom16\",-1);\n\tagent.setPropertyValue(\"currentLocation\",agent.getPropertyValue(\"home\"));\n\t//println(agent.getPropertyValue(\"currentLocation\").getState().getName());\n\tagent.setPropertyValue(\"lat\",((CensusBlockGroup)(agent.getPropertyValue(\"currentLocation\"))).getLat());\n\tagent.setPropertyValue(\"lon\",((CensusBlockGroup)(agent.getPropertyValue(\"currentLocation\"))).getLon());\n\t\n\t\n\n\t//println(\"lat: \"+agent.getPropertyValue(\"currentLocation\").getLat());\n\t//println(\"lon: \"+agent.getPropertyValue(\"currentLocation\").getLon());\n\t\n\tArrayList destinationPlaces\u003dnew ArrayList();\n\tArrayList destinationPlacesFreq\u003dnew ArrayList();\n\n\t//println(\"\u0026\u0026\u0026\u0026\");\n\tfor(int j\u003d0;j\u003cpatternRecords.size();j++){\n\t\tif(((PatternsRecordProcessed)(patternRecords.get(j))).getVisitor_home_cbgs_place()!\u003dnull){\n\t\t\tfor(int k\u003d0;k\u003c((ArrayList)(((PatternsRecordProcessed)(patternRecords.get(j))).getVisitor_home_cbgs_place())).size();k++){\n\t\t\t\tif(((CensusBlockGroup)(agent.getPropertyValue(\"home\"))).id\u003d\u003d((CensusBlockGroup)((CensusBlockGroupIntegerTuple)((ArrayList)((PatternsRecordProcessed)(patternRecords.get(j))).getVisitor_home_cbgs_place()).get(k)).getKey()).getId()){\n\t\t\t\t\tdestinationPlaces.add(((PatternsRecordProcessed)(patternRecords.get(j))));\n\t\t\t\t\tdestinationPlacesFreq.add(((CensusBlockGroupIntegerTuple)(((ArrayList)(((PatternsRecordProcessed)(patternRecords.get(j))).getVisitor_home_cbgs_place())).get(k))).getValue());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tagent.setPropertyValue(\"destinationPlaces\",destinationPlaces);\n\tagent.setPropertyValue(\"destinationPlacesFreq\",destinationPlacesFreq);\n\tagent.setPropertyValue(\"travelStartDecisionCounter\",new Integer(0));\n\tagent.setPropertyValue(\"dstIndex\",new Integer(-1));//THIS IS USED TO DETECT IF THE PERSON IS AT HOME OR NOT\n\n\tint cumulativeDestinationFreqs\u003d0;\n\tfor(int k\u003d0;k\u003cdestinationPlacesFreq.size();k++){\n\t\tcumulativeDestinationFreqs\u003dcumulativeDestinationFreqs+(Integer)(destinationPlacesFreq.get(k));\n\t}\n\tagent.setPropertyValue(\"cumulativeDestinationFreqs\",new Integer(cumulativeDestinationFreqs));\n}\n}\n\n@CompileStatic\ndef initialInfectPeople(MainModel modelRoot,ArrayList cBGs){\n\t//println(\"1\");\n\tArrayList\u003cDailyConfirmedCases\u003e dailyConfirmedCases\u003d((CovidCsseJhu)(modelRoot.covidCsseJhu)).dailyConfirmedCasesList;\n\t//println(\"2\");\n\t//println(dailyConfirmedCases);\n\t\n\tif(((AgentBasedModel)(modelRoot.getABM())).studyScopeGeography instanceof County){\n\t\tfor(int i\u003d0;i\u003c((List)((AgentBasedModel)(modelRoot.getABM())).getAgents()).size();i++){\n\t\t\tif(((String)(((AgentTemplate)(((Agent)(((List)((AgentBasedModel)(modelRoot.getABM())).getAgents()).get(i))).myTemplate)).getAgentTypeName())).equals(\"person\")){\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}else if(((AgentBasedModel)(modelRoot.getABM())).studyScopeGeography instanceof State){\n\t\tState scope\u003d(State)(((AgentBasedModel)(modelRoot.getABM())).studyScopeGeography);\n\t\tdouble[] percentageSickInCounties\u003dnew double[((ArrayList\u003cCounty\u003e)(scope.getCounties())).size()];\n\t\tfor(int i\u003d0;i\u003cpercentageSickInCounties.length;i++){\n\t\t\tint startingDateIndex\u003d-1;\n\t\t\tfor(int d\u003d0;d\u003cdailyConfirmedCases.size();d++){\n\t\t\t\t//println(((County)(((ArrayList\u003cCounty\u003e)(scope.getCounties())).get(i))));\n\t\t\t\t//println((((DailyConfirmedCases)(dailyConfirmedCases.get(d))).getCounty()));\n\t\t\t\t//if((((DailyConfirmedCases)(dailyConfirmedCases.get(d))).getCounty())\u003d\u003dnull){\n\t\t\t\t//\tprintln(\"NULL FOUND!!!\");\n\t\t\t\t//}\n\t\t\t\tif(((County)(((ArrayList\u003cCounty\u003e)(scope.getCounties())).get(i))).getId()\u003d\u003d((County)(((DailyConfirmedCases)(dailyConfirmedCases.get(d))).getCounty())).getId()){\n\t\t\t\t\t//if(((DailyConfirmedCases)(dailyConfirmedCases.get(d))).getDate()\u003d\u003dnull){\n\t\t\t\t\t//\tprintln(\"NULL FOUND!\");\n\t\t\t\t\t//}\n\t\t\t\t\tif(((ZonedDateTime)(((AgentBasedModel)(modelRoot.getABM())).getCurrentTime())).equals(((ZonedDateTime)(((DailyConfirmedCases)(dailyConfirmedCases.get(d))).getDate())))\u003d\u003dtrue){\n\t\t\t\t\t\tpercentageSickInCounties[i]\u003d((DailyConfirmedCases)(dailyConfirmedCases.get(d))).getNumActiveCases()/((County)(((ArrayList\u003cCounty\u003e)(scope.getCounties())).get(i))).getPopulation();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t\t//println(\"3\");\n\n\t\tdouble[] generatedPopulationInCounties\u003dnew double[((ArrayList\u003cCounty\u003e)(scope.getCounties())).size()];\n\t\tfor(int i\u003d0;i\u003c((List)((AgentBasedModel)(modelRoot.getABM())).getAgents()).size();i++){\n\t\t\tif(((String)(((AgentTemplate)(((Agent)(((List)((AgentBasedModel)(modelRoot.getABM())).getAgents()).get(i))).myTemplate)).getAgentTypeName())).equals(\"Person\")){\n\t\t\t\tfor(int j\u003d0;j\u003c((ArrayList\u003cCounty\u003e)(scope.getCounties())).size();j++){\n\t\t\t\t\tif(((County)(((CensusBlockGroup)(((Agent)(((List)((AgentBasedModel)(modelRoot.getABM())).getAgents()).get(i))).getPropertyValue(\"home\"))).getCounty())).getId()\u003d\u003d((County)(((ArrayList\u003cCounty\u003e)(scope.getCounties())).get(j))).getId()){\n\t\t\t\t\t\tgeneratedPopulationInCounties[j]\u003dgeneratedPopulationInCounties[j]+1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint sumResident\u003d0;\n\t\tfor(int i\u003d0;i\u003cgeneratedPopulationInCounties.length;i++){\n\t\t\tsumResident\u003dsumResident+(int)generatedPopulationInCounties[i];\n\t\t}\n\t\t//println(sumResident);\n\t\t((Agent)((((AgentBasedModel)(modelRoot.getABM())).getRootAgent()))).setPropertyValue(\"residentPopulation\",sumResident);\n\n\t\tdouble[] currentNumberOfInfectedInCounty\u003dnew int[((ArrayList\u003cCounty\u003e)(scope.getCounties())).size()];\n\t\tfor(int i\u003d0;i\u003c((List)((AgentBasedModel)(modelRoot.getABM())).getAgents()).size();i++){\n\t\t\tif(((String)(((AgentTemplate)(((Agent)(((List)((AgentBasedModel)(modelRoot.getABM())).getAgents()).get(i))).myTemplate)).getAgentTypeName())).equals(\"Person\")){\n\t\t\t\tfor(int j\u003d0;j\u003c((ArrayList\u003cCounty\u003e)(scope.getCounties())).size();j++){\n\t\t\t\t\tif(((County)(((CensusBlockGroup)(((Agent)(((List)((AgentBasedModel)(modelRoot.getABM())).getAgents()).get(i))).getPropertyValue(\"home\"))).getCounty())).getId()\u003d\u003d((County)(((ArrayList\u003cCounty\u003e)(scope.getCounties())).get(j))).getId()){\n\t\t\t\t\t\t//println(\"before infecting\");\n\t\t\t\t\t\tif((currentNumberOfInfectedInCounty[j]/generatedPopulationInCounties[j])\u003cpercentageSickInCounties[j]){\n\t\t\t\t\t\t\tif(Math.random()\u003c0.7){\n\t\t\t\t\t\t\t\t//println(\"IS\");\n\t\t\t\t\t\t\t\t((Agent)(((List)((AgentBasedModel)(modelRoot.getABM())).getAgents()).get(i))).setPropertyValue(\"status\", statusEnum.INFECTED_SYM.ordinal());\n\t\t\t\t\t\t\t\tfor(int n\u003d0;n\u003ccBGs.size();n++){\n\t\t\t\t\t\t\t\t\t//println(\"%%%\");\n\t\t\t\t\t\t\t\t\tif((((CensusBlockGroup)(((Agent)(((List)((AgentBasedModel)(modelRoot.getABM())).getAgents()).get(i))).getPropertyValue(\"home\"))).getId()\u003d\u003d((CensusBlockGroup)(((Agent)(cBGs.get(n))).getPropertyValue(\"cbgVal\"))).getId())){\n\t\t\t\t\t\t\t\t\t\t((Agent)(cBGs.get(n))).setPropertyValue(\"IS\",(int)(((Agent)(cBGs.get(n))).getPropertyValue(\"IS\"))+1);\n\t\t\t\t\t\t\t\t\t\t((Agent)(cBGs.get(n))).setPropertyValue(\"S\",(int)(((Agent)(cBGs.get(n))).getPropertyValue(\"S\"))-1);\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\t//println(\"IAS\");\n\t\t\t\t\t\t\t\t((Agent)(((List)((AgentBasedModel)(modelRoot.getABM())).getAgents()).get(i))).setPropertyValue(\"status\", statusEnum.INFECTED_ASYM.ordinal());\n\t\t\t\t\t\t\t\tfor(int n\u003d0;n\u003ccBGs.size();n++){\n\t\t\t\t\t\t\t\t\t//println(\"%%%\");\n\t\t\t\t\t\t\t\t\tif((((CensusBlockGroup)(((Agent)(((List)((AgentBasedModel)(modelRoot.getABM())).getAgents()).get(i))).getPropertyValue(\"home\"))).getId()\u003d\u003d((CensusBlockGroup)(((Agent)(cBGs.get(n))).getPropertyValue(\"cbgVal\"))).getId())){\n\t\t\t\t\t\t\t\t\t\t((Agent)(cBGs.get(n))).setPropertyValue(\"IAS\",(int)(((Agent)(cBGs.get(n))).getPropertyValue(\"IAS\"))+1);\n\t\t\t\t\t\t\t\t\t\t((Agent)(cBGs.get(n))).setPropertyValue(\"S\",(int)(((Agent)(cBGs.get(n))).getPropertyValue(\"S\"))-1);\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tcurrentNumberOfInfectedInCounty[j]\u003dcurrentNumberOfInfectedInCounty[j]+1;\n\t\t\t\t\t\t\t//println(\"did infecting\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}else if(((AgentBasedModel)(modelRoot.getABM())).studyScopeGeography instanceof Country){\n\t\tSystem.out.println(\"Infection for country level not implemented yet!\");\n\t}else if(((AgentBasedModel)(modelRoot.getABM())).studyScopeGeography instanceof City){\n\t\tCity scope\u003d(City)(((AgentBasedModel)(modelRoot.getABM())).studyScopeGeography);\n\t\t//ArrayList\u003cDouble\u003e percentageSickInCounties\u003dnew ArrayList();\n\t\tdouble[] percentageSickInTracts\u003dnew double[((ArrayList\u003cCensusTract\u003e)(scope.getCensusTracts())).size()];\n\t\tfor(int i\u003d0;i\u003cpercentageSickInTracts.length;i++){\n\t\t\tint startingDateIndex\u003d-1;\n\t\t\tfor(int d\u003d0;d\u003cdailyConfirmedCases.size();d++){\n\t\t\t\tif(((County)(((CensusTract)(((ArrayList\u003cCensusTract\u003e)(scope.getCensusTracts())).get(i))).getCounty())).getId()\u003d\u003d((County)(((DailyConfirmedCases)(dailyConfirmedCases.get(d))).getCounty())).getId()){\n\t\t\t\t\t//if(((ZonedDateTime)(((AgentBasedModel)(modelRoot.getABM())).getCurrentTime()))\u003d\u003dnull){\n\t\t\t\t\t//\tprintln(\"777\");\n\t\t\t\t\t//}\n\t\t\t\t\t//if(((ZonedDateTime)(((DailyConfirmedCases)(dailyConfirmedCases.get(d))).getDate()))\u003d\u003dnull){\n\t\t\t\t\t//\tprintln(\"888\");\n\t\t\t\t\t//}\n\t\t\t\t\tif(((ZonedDateTime)(((AgentBasedModel)(modelRoot.getABM())).getCurrentTime())).equals(((ZonedDateTime)(((DailyConfirmedCases)(dailyConfirmedCases.get(d))).getDate())))\u003d\u003dtrue){\n\t\t\t\t\t\t//percentageSickInCounties[i]\u003d((DailyConfirmedCases)(dailyConfirmedCases.get(d))).getNumActiveCases()/((County)(((CensusTract)(((ArrayList\u003cCensusTract\u003e)(scope.getCensusTracts())).get(i))).getCounty())).getPopulation();\n\t\t\t\t\t\tpercentageSickInTracts[i]\u003d(((DailyConfirmedCases)(dailyConfirmedCases.get(d))).getNumActiveCases()/((County)(((CensusTract)(((ArrayList\u003cCensusTract\u003e)(scope.getCensusTracts())).get(i))).getCounty())).getPopulation())*((float)((((CensusTract)(((ArrayList\u003cCensusTract\u003e)(scope.getCensusTracts())).get(i))).getPopulation()))/(float)(((County)(((CensusTract)(((ArrayList\u003cCensusTract\u003e)(scope.getCensusTracts())).get(i))).getCounty())).getPopulation()));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t}\n\n\t\tdouble[] generatedPopulationInTracts\u003dnew double[((ArrayList\u003cCensusTract\u003e)(scope.getCensusTracts())).size()];\n\t\tfor(int i\u003d0;i\u003c((List)((AgentBasedModel)(modelRoot.getABM())).getAgents()).size();i++){\n\t\t\tif(((String)(((AgentTemplate)(((Agent)(((List)((AgentBasedModel)(modelRoot.getABM())).getAgents()).get(i))).myTemplate)).getAgentTypeName())).equals(\"Person\")){\n\t\t\t\tfor(int j\u003d0;j\u003c((ArrayList\u003cCensusTract\u003e)(scope.getCensusTracts())).size();j++){\n\t\t\t\t\tif(((CensusTract)(((CensusBlockGroup)(((Agent)(((List)((AgentBasedModel)(modelRoot.getABM())).getAgents()).get(i))).getPropertyValue(\"home\"))).getCensusTract())).getId()\u003d\u003d((CensusTract)(((ArrayList\u003cCensusTract\u003e)(scope.getCensusTracts())).get(j))).getId()){\n\t\t\t\t\t\tgeneratedPopulationInTracts[j]\u003dgeneratedPopulationInTracts[j]+1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint sumResident\u003d0;\n\t\tfor(int i\u003d0;i\u003cgeneratedPopulationInTracts.length;i++){\n\t\t\tsumResident\u003dsumResident+(int)generatedPopulationInTracts[i];\n\t\t}\n\t\t//println(sumResident);\n\t\t((Agent)((((AgentBasedModel)(modelRoot.getABM())).getRootAgent()))).setPropertyValue(\"residentPopulation\",sumResident);\n\n\t\tdouble[] currentNumberOfInfectedInTract\u003dnew int[((ArrayList\u003cCensusTract\u003e)(scope.getCensusTracts())).size()];\n\t\tfor(int i\u003d0;i\u003c((List)((AgentBasedModel)(modelRoot.getABM())).getAgents()).size();i++){\n\t\t\tif(((String)(((AgentTemplate)(((Agent)(((List)((AgentBasedModel)(modelRoot.getABM())).getAgents()).get(i))).myTemplate)).getAgentTypeName())).equals(\"Person\")){\n\t\t\t\tfor(int j\u003d0;j\u003c((ArrayList\u003cCensusTract\u003e)(scope.getCensusTracts())).size();j++){\n\t\t\t\t\tif(((CensusTract)(((CensusBlockGroup)(((Agent)(((List)((AgentBasedModel)(modelRoot.getABM())).getAgents()).get(i))).getPropertyValue(\"home\"))).getCensusTract())).getId()\u003d\u003d((CensusTract)(((ArrayList\u003cCensusTract\u003e)(scope.getCensusTracts())).get(j))).getId()){\n\t\t\t\t\t\t//println(\"before infecting\");\n\t\t\t\t\t\tif((currentNumberOfInfectedInTract[j]/generatedPopulationInTracts[j])\u003cpercentageSickInTracts[j]){\n\t\t\t\t\t\t\tif(Math.random()\u003c0.7){\n\t\t\t\t\t\t\t\t//println(\"IS\");\n\t\t\t\t\t\t\t\t((Agent)(((List)((AgentBasedModel)(modelRoot.getABM())).getAgents()).get(i))).setPropertyValue(\"status\", statusEnum.INFECTED_SYM.ordinal());\n\t\t\t\t\t\t\t\tfor(int n\u003d0;n\u003ccBGs.size();n++){\n\t\t\t\t\t\t\t\t\t//println(\"%%%\");\n\t\t\t\t\t\t\t\t\tif((((CensusBlockGroup)(((Agent)(((List)((AgentBasedModel)(modelRoot.getABM())).getAgents()).get(i))).getPropertyValue(\"home\"))).getId()\u003d\u003d((CensusBlockGroup)(((Agent)(cBGs.get(n))).getPropertyValue(\"cbgVal\"))).getId())){\n\t\t\t\t\t\t\t\t\t\t((Agent)(cBGs.get(n))).setPropertyValue(\"IS\",(int)(((Agent)(cBGs.get(n))).getPropertyValue(\"IS\"))+1);\n\t\t\t\t\t\t\t\t\t\t((Agent)(cBGs.get(n))).setPropertyValue(\"S\",(int)(((Agent)(cBGs.get(n))).getPropertyValue(\"S\"))-1);\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\t//println(\"IAS\");\n\t\t\t\t\t\t\t\t((Agent)(((List)((AgentBasedModel)(modelRoot.getABM())).getAgents()).get(i))).setPropertyValue(\"status\", statusEnum.INFECTED_ASYM.ordinal());\n\t\t\t\t\t\t\t\tfor(int n\u003d0;n\u003ccBGs.size();n++){\n\t\t\t\t\t\t\t\t\t//println(\"%%%\");\n\t\t\t\t\t\t\t\t\tif((((CensusBlockGroup)(((Agent)(((List)((AgentBasedModel)(modelRoot.getABM())).getAgents()).get(i))).getPropertyValue(\"home\"))).getId()\u003d\u003d((CensusBlockGroup)(((Agent)(cBGs.get(n))).getPropertyValue(\"cbgVal\"))).getId())){\n\t\t\t\t\t\t\t\t\t\t((Agent)(cBGs.get(n))).setPropertyValue(\"IAS\",(int)(((Agent)(cBGs.get(n))).getPropertyValue(\"IAS\"))+1);\n\t\t\t\t\t\t\t\t\t\t((Agent)(cBGs.get(n))).setPropertyValue(\"S\",(int)(((Agent)(cBGs.get(n))).getPropertyValue(\"S\"))-1);\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tcurrentNumberOfInfectedInTract[j]\u003dcurrentNumberOfInfectedInTract[j]+1;\n\t\t\t\t\t\t\t//println(\"did infecting\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}else{\n\t\tSystem.out.println(\"Infection for less than county level not implemented yet!\");\n\t}\n\t\n}\n"
        },
        "pythonScript": {
          "script": ""
        },
        "isJavaScriptActive": true
      },
      "destructor": {
        "javaScript": {
          "script": ""
        },
        "pythonScript": {
          "script": ""
        },
        "isJavaScriptActive": true
      },
      "behavior": {
        "javaScript": {
          "script": "import COVID_AgentBasedSimulation.Model.MainModel;\nimport java.time.ZonedDateTime;\nimport java.io.File;\nimport COVID_AgentBasedSimulation.Model.AgentBasedModel.Agent;\nimport COVID_AgentBasedSimulation.Model.AgentBasedModel.AgentBasedModel;\nimport COVID_AgentBasedSimulation.Model.AgentBasedModel.AgentTemplate;\nimport java.util.concurrent.CopyOnWriteArrayList;\nimport COVID_AgentBasedSimulation.Model.Structure.Country;\nimport COVID_AgentBasedSimulation.Model.Structure.State;\nimport COVID_AgentBasedSimulation.Model.Structure.County;\nimport COVID_AgentBasedSimulation.Model.Structure.City;\nimport COVID_AgentBasedSimulation.Model.Structure.CensusTract;\nimport COVID_AgentBasedSimulation.Model.Structure.CensusBlockGroup;\nimport COVID_AgentBasedSimulation.Model.Data.CovidCsseJhu.CovidCsseJhu;\nimport COVID_AgentBasedSimulation.Model.Data.CovidCsseJhu.DailyConfirmedCases;\nimport java.time.temporal.ChronoUnit;\nimport java.util.concurrent.CopyOnWriteArrayList;\nimport groovy.transform.CompileStatic;\nimport esmaieeli.utilities.taskThreading.ParallelProcessor;\n\nwriteMinuteRecord(modelRoot,currentAgent,modelRoot.getABM().getCurrentTime());\n\n@CompileStatic\npublic class ParallelAgentStatusReporter extends ParallelProcessor {\n\n\tpublic int threadIndex;\n\tpublic MainModel modelRoot;\n\tpublic int statusSusceptible;\n\tpublic int statusExposed;\n\tpublic int statusInfected_sym;\n\tpublic int statusInfected_asym;\n\tpublic int statusRecovered;\n\tpublic int statusDead;\n\tpublic int statusUnknown;\n\t\n\n\t@CompileStatic\n\tpublic ParallelAgentStatusReporter(int passed_threadIndex, MainModel passed_modelRoot, Object parent, Object data, int startIndex, int endIndex) {\n\t\tsuper(parent, data, startIndex, endIndex);\n\t\tthreadIndex\u003dpassed_threadIndex;\n\t\tmodelRoot\u003dpassed_modelRoot;\n\t\tmyThread \u003d new Thread(new Runnable() {\n            @Override\n            @CompileStatic\n            public void run() {\n            \tprintln(\"POLL STATUSES\");\n            \trunParallelAgentStatuses(modelRoot,startIndex,endIndex,threadIndex);\n            }\n\t\t});\n\t}\n\n\t@CompileStatic\n\tdef runParallelAgentStatuses(MainModel modelRoot, int startIndex, int endIndex, int threadIndex){\n\t\tCopyOnWriteArrayList\u003cAgent\u003e agents\u003d((AgentBasedModel)(modelRoot.getABM())).getAgents();\n\t\tstatusSusceptible\u003d0;\n\t\tstatusExposed\u003d0;\n\t\tstatusInfected_sym\u003d0;\n\t\tstatusInfected_asym\u003d0;\n\t\tstatusRecovered\u003d0;\n\t\tstatusDead\u003d0;\n\t\tstatusUnknown\u003d0;\n\t\tfor(int i\u003dstartIndex;i\u003cendIndex;i++){\n\t\t\t//println(\"!!!\");\n\t\t\tif(((String)(((AgentTemplate)(agents.get(i).getMyTemplate())).getAgentTypeName())).equals(\"Person\")){\n\t\t\t\t//if(((Agent)agents.get(i)).getPropertyValue(\"cBG\")!\u003dnull){\n\t\t\t\t\tint status\u003d(int)(((Agent)(agents.get(i))).getPropertyValue(\"status\"));\n\t\t\t\t\t//println(\"status: \"+status);\n\t\t\t\t\tif(status\u003d\u003d0){\n\t\t\t\t\t\tstatusSusceptible\u003dstatusSusceptible+1;\n\t\t\t\t\t}else if(status\u003d\u003d1){\n\t\t\t\t\t\tstatusExposed\u003dstatusExposed+1;\n\t\t\t\t\t}else if(status\u003d\u003d2){\n\t\t\t\t\t\tstatusInfected_sym\u003dstatusInfected_sym+1;\n\t\t\t\t\t}else if(status\u003d\u003d3){\n\t\t\t\t\t\tstatusInfected_asym\u003dstatusInfected_asym+1;\n\t\t\t\t\t}else if(status\u003d\u003d4){\n\t\t\t\t\t\tstatusRecovered\u003dstatusRecovered+1;\n\t\t\t\t\t}else if(status\u003d\u003d5){\n\t\t\t\t\t\tstatusDead\u003dstatusDead+1;\n\t\t\t\t\t}else if(status\u003d\u003d-1){\n\t\t\t\t\t\tstatusUnknown\u003dstatusUnknown+1;\n\t\t\t\t\t}\n\t\t\t\t//}\n\t\t\t}\n\t\t}\n\t}\n\n\t\n}\n\n\n\n/*\n@CompileStatic\npublic class ParallelStateReporter extends ParallelProcessor {\n\n\tpublic int threadIndex;\n\tpublic MainModel modelRoot;\n\tpublic int statusSusceptible;\n\tpublic int statusExposed;\n\tpublic int statusInfected_sym;\n\tpublic int statusInfected_asym;\n\tpublic int statusRecovered;\n\tpublic int statusDead;\n\tpublic int statusUnknown;\n\t\n\n\t@CompileStatic\n\tpublic ParallelAgentStatusReporter(int passed_threadIndex, MainModel passed_modelRoot, Object parent, Object data, int startIndex, int endIndex) {\n\t\tsuper(parent, data, startIndex, endIndex);\n\t\tthreadIndex\u003dpassed_threadIndex;\n\t\tmodelRoot\u003dpassed_modelRoot;\n\t\tmyThread \u003d new Thread(new Runnable() {\n            @Override\n            @CompileStatic\n            public void run() {\n            \tprintln(\"POLL STATUSES\");\n            \trunParallelAgentStatuses(modelRoot,startIndex,endIndex,threadIndex);\n            }\n\t\t});\n\t}\n\n\t@CompileStatic\n\tdef runParallelAgentStatuses(MainModel modelRoot, int startIndex, int endIndex, int threadIndex){\n\t\tCopyOnWriteArrayList\u003cAgent\u003e agents\u003d((AgentBasedModel)(modelRoot.getABM())).getAgents();\n\t\tstatusSusceptible\u003d0;\n\t\tstatusExposed\u003d0;\n\t\tstatusInfected_sym\u003d0;\n\t\tstatusInfected_asym\u003d0;\n\t\tstatusRecovered\u003d0;\n\t\tstatusDead\u003d0;\n\t\tstatusUnknown\u003d0;\n\t\tfor(int i\u003dstartIndex;i\u003cendIndex;i++){\n\t\t\t//println(\"!!!\");\n\t\t\tif(((String)(((AgentTemplate)(agents.get(i).getMyTemplate())).getAgentTypeName())).equals(\"Person\")){\n\t\t\t\tif(((Agent)agents.get(i)).getPropertyValue(\"cBG\")!\u003dnull){\n\t\t\t\t\tint status\u003d(int)(((Agent)(agents.get(i))).getPropertyValue(\"status\"));\n\t\t\t\t\t//println(\"status: \"+status);\n\t\t\t\t\tif(status\u003d\u003d0){\n\t\t\t\t\t\tstatusSusceptible\u003dstatusSusceptible+1;\n\t\t\t\t\t}else if(status\u003d\u003d1){\n\t\t\t\t\t\tstatusExposed\u003dstatusExposed+1;\n\t\t\t\t\t}else if(status\u003d\u003d2){\n\t\t\t\t\t\tstatusInfected_sym\u003dstatusInfected_sym+1;\n\t\t\t\t\t}else if(status\u003d\u003d3){\n\t\t\t\t\t\tstatusInfected_asym\u003dstatusInfected_asym+1;\n\t\t\t\t\t}else if(status\u003d\u003d4){\n\t\t\t\t\t\tstatusRecovered\u003dstatusRecovered+1;\n\t\t\t\t\t}else if(status\u003d\u003d5){\n\t\t\t\t\t\tstatusDead\u003dstatusDead+1;\n\t\t\t\t\t}else if(status\u003d\u003d-1){\n\t\t\t\t\t\tstatusUnknown\u003dstatusUnknown+1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t\n}\n*/\n\n@CompileStatic\ndef writeMinuteRecord(MainModel modelRoot, Agent currentAgent, ZonedDateTime currentDate){\n\tif(currentDate.getHour()\u003d\u003d0 \u0026\u0026 currentDate.getMinute()\u003d\u003d1){\n\t\ttry {\n\t\t\tCopyOnWriteArrayList\u003cAgent\u003e agents\u003d((AgentBasedModel)(modelRoot.getABM())).getAgents();\n\t\t\tStringBuilder data \u003d new StringBuilder();\n\t\t\tint statusSusceptible\u003d0;\n\t\t\tint statusExposed\u003d0;\n\t\t\tint statusInfected_sym\u003d0;\n\t\t\tint statusInfected_asym\u003d0;\n\t\t\tint statusRecovered\u003d0;\n\t\t\tint statusDead\u003d0;\n\t\t\tint statusUnknown\u003d0;\n\t\t\t\n\t\t\t//println(\"!!!\");\n\n\t\t\tint numAgents \u003d agents.size();\n\t\t\tint numProcessors \u003d modelRoot.getNumCPUs();\n\t\t\tif (numProcessors \u003e Runtime.getRuntime().availableProcessors()) {\n\t\t\t\tnumProcessors \u003d Runtime.getRuntime().availableProcessors();\n\t\t\t}\n\t\t\tParallelAgentStatusReporter[] parallelAgentStatusReporter \u003d new ParallelAgentStatusReporter[numProcessors];\n\t\t\t\n\t\t\tfor (int i \u003d 0; i \u003c numProcessors - 1; i++) {\n\t\t\t\tparallelAgentStatusReporter[i] \u003d new ParallelAgentStatusReporter(i, modelRoot, null, null, (int) Math.floor((double)(i * ((numAgents) / numProcessors))), (int) Math.floor((double)((i + 1) * ((numAgents) / numProcessors))));\n\t\t\t}\n\t\t\tparallelAgentStatusReporter[numProcessors - 1] \u003d new ParallelAgentStatusReporter(numProcessors-1, modelRoot, null,null, (int) Math.floor((double)((numProcessors - 1) * ((numAgents) / numProcessors))), numAgents);\n\t\t\t\n\t\t\tfor (int i \u003d 0; i \u003c numProcessors; i++) {\n\t\t\t\tparallelAgentStatusReporter[i].myThread.start();\n\t\t\t\tSystem.out.println(\"thread \" + i + \" started for statuses!\");\n\t\t\t}\n\t\t\tfor (int i \u003d 0; i \u003c numProcessors; i++) {\n\t\t\t\ttry {\n\t\t\t\t\tprintln(\"####\");\n\t\t\t\t\tparallelAgentStatusReporter[i].myThread.join();\n\t\t\t\t\tSystem.out.println(\"thread \" + i + \" finished for agents: \" + parallelAgentStatusReporter[i].myStartIndex + \" | \" + parallelAgentStatusReporter[i].myEndIndex);\n\t\t\t\t\tstatusSusceptible\u003dstatusSusceptible+parallelAgentStatusReporter[i].statusSusceptible;\n\t\t\t\t\tstatusExposed\u003dstatusExposed+parallelAgentStatusReporter[i].statusExposed;\n\t\t\t\t\tstatusInfected_sym\u003dstatusInfected_sym+parallelAgentStatusReporter[i].statusInfected_sym;\n\t\t\t\t\tstatusInfected_asym\u003dstatusInfected_asym+parallelAgentStatusReporter[i].statusInfected_asym;\n\t\t\t\t\tstatusRecovered\u003dstatusRecovered+parallelAgentStatusReporter[i].statusRecovered;\n\t\t\t\t\tstatusDead\u003dstatusDead+parallelAgentStatusReporter[i].statusDead;\n\t\t\t\t\tstatusUnknown\u003dstatusUnknown+parallelAgentStatusReporter[i].statusUnknown;\n\t\t\t\t} catch (InterruptedException ie) {\n\t\t\t\t\tSystem.out.println(ie.toString());\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tint realInfection\u003d0;\n\t\t\tint numActiveInfected\u003d0;\n\t\t\tint scopePopulation\u003d0;\n\n\t\t\t\n\t\t\t/* \t//SERIALLY GET AGENT STATUSES\n\t\t\tfor(int i\u003d0;i\u003cagents.size();i++){\n\t\t\t\t//println(\"!!!\");\n\t\t\t\tif(((String)(((AgentTemplate)(agents.get(i).getMyTemplate())).getAgentTypeName())).equals(\"Person\")){\n\t\t\t\t\tif(((Agent)agents.get(i)).getPropertyValue(\"cBG\")!\u003dnull){\n\t\t\t\t\t\tint status\u003d(int)(((Agent)(agents.get(i))).getPropertyValue(\"status\"));\n\t\t\t\t\t\t//println(\"status: \"+status);\n\t\t\t\t\t\tif(status\u003d\u003d0){\n\t\t\t\t\t\t\tstatusSusceptible\u003dstatusSusceptible+1;\n\t\t\t\t\t\t}else if(status\u003d\u003d1){\n\t\t\t\t\t\t\tstatusExposed\u003dstatusExposed+1;\n\t\t\t\t\t\t}else if(status\u003d\u003d2){\n\t\t\t\t\t\t\tstatusInfected_sym\u003dstatusInfected_sym+1;\n\t\t\t\t\t\t}else if(status\u003d\u003d3){\n\t\t\t\t\t\t\tstatusInfected_asym\u003dstatusInfected_asym+1;\n\t\t\t\t\t\t}else if(status\u003d\u003d4){\n\t\t\t\t\t\t\tstatusRecovered\u003dstatusRecovered+1;\n\t\t\t\t\t\t}else if(status\u003d\u003d5){\n\t\t\t\t\t\t\tstatusDead\u003dstatusDead+1;\n\t\t\t\t\t\t}else if(status\u003d\u003d-1){\n\t\t\t\t\t\t\tstatusUnknown\u003dstatusUnknown+1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t*/\n\n\t\t\tArrayList\u003cDailyConfirmedCases\u003e dailyConfirmedCases\u003d((CovidCsseJhu)(modelRoot.covidCsseJhu)).dailyConfirmedCasesList;\n\t\t\tif(((AgentBasedModel)(modelRoot.getABM())).studyScopeGeography instanceof County){\n\t\t\t\t\n\t\t\t}else if(((AgentBasedModel)(modelRoot.getABM())).studyScopeGeography instanceof State){\n\t\t\t\tState scope\u003d(State)(((AgentBasedModel)(modelRoot.getABM())).studyScopeGeography);\n\t\t\t\tscopePopulation\u003dscope.getPopulation();\n\t\t\t\tfor(int j\u003d0;j\u003c((ArrayList\u003cCounty\u003e)(scope.getCounties())).size();j++){\n\t\t\t\t\tfor(int d\u003d0;d\u003cdailyConfirmedCases.size();d++){\n\t\t\t\t\t\tif(((String)(((State)(((County)(((DailyConfirmedCases)(dailyConfirmedCases.get(d))).getCounty())).getState())).getName())).equals(scope.getName())){\n\t\t\t\t\t\t\tif(((County)(((ArrayList\u003cCounty\u003e)(scope.getCounties())).get(j))).getId()\u003d\u003d((County)(((DailyConfirmedCases)(dailyConfirmedCases.get(d))).getCounty())).getId()){\n\t\t\t\t\t\t\t\tif(((ZonedDateTime)(((ZonedDateTime)(((AgentBasedModel)(modelRoot.getABM())).getCurrentTime())).truncatedTo(ChronoUnit.DAYS))).equals(((ZonedDateTime)(((DailyConfirmedCases)(dailyConfirmedCases.get(d))).getDate())))\u003d\u003dtrue){\n\t\t\t\t\t\t\t\t\tnumActiveInfected\u003dnumActiveInfected+((DailyConfirmedCases)(dailyConfirmedCases.get(d))).getNumActiveCases();\n\t\t\t\t\t\t\t\t//println(d);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}else if(((AgentBasedModel)(modelRoot.getABM())).studyScopeGeography instanceof Country){\n\t\t\t\tSystem.out.println(\"Infection for country level not implemented yet!\");\n\t\t\t}else if(((AgentBasedModel)(modelRoot.getABM())).studyScopeGeography instanceof City){\n\t\t\t\tCity scope\u003d(City)(((AgentBasedModel)(modelRoot.getABM())).studyScopeGeography);\n\t\t\t\tscopePopulation\u003dscope.getPopulation();\n\t\t\t\tint start\u003d(int)(currentAgent.getPropertyValue(\"startCountyIndex\"));\n\t\t\t\tint end\u003d(int)(currentAgent.getPropertyValue(\"endCountyIndex\"));\n\t\t\t\tfor(int j\u003d0;j\u003c((ArrayList\u003cCensusTract\u003e)(scope.getCensusTracts())).size();j++){\n\t\t\t\t\tfor(int d\u003dstart;d\u003c\u003dend;d++){\n\t\t\t\t\t\tif(((String)(((State)(((County)(((DailyConfirmedCases)(dailyConfirmedCases.get(d))).getCounty())).getState())).getName())).equals(((State)(((CensusTract)(((ArrayList\u003cCensusTract\u003e)(scope.getCensusTracts())).get(0))).getState())).getName())){\n\t\t\t\t\t\t\tif(((County)(((CensusTract)(((ArrayList\u003cCensusTract\u003e)(scope.getCensusTracts())).get(j))).getCounty())).getId()\u003d\u003d((County)(((DailyConfirmedCases)(dailyConfirmedCases.get(d))).getCounty())).getId()){\n\t\t\t\t\t\t\t\tif(((ZonedDateTime)(((ZonedDateTime)(((AgentBasedModel)(modelRoot.getABM())).getCurrentTime())).truncatedTo(ChronoUnit.DAYS))).equals(((ZonedDateTime)(((DailyConfirmedCases)(dailyConfirmedCases.get(d))).getDate())))\u003d\u003dtrue){\n\t\t\t\t\t\t\t\t\t//println(\"daily county cases: \"+(int)(((DailyConfirmedCases)(dailyConfirmedCases.get(d))).getNumActiveCases()));\n\t\t\t\t\t\t\t\t\t//println(\"county population: \"+(float)(((County)(((CensusTract)(((ArrayList\u003cCensusTract\u003e)(scope.getCensusTracts())).get(j))).getCounty())).getPopulation()));\n\t\t\t\t\t\t\t\t\t//println(\"census tract population: \"+(float)(((CensusTract)(((ArrayList\u003cCensusTract\u003e)(scope.getCensusTracts())).get(j))).getPopulation()));\n\t\t\t\t\t\t\t\t\t//println(\"numActiveInfected: \"+numActiveInfected);\n\t\t\t\t\t\t\t\t\t//println(\"fraction: \"+((float)(((County)(((CensusTract)(((ArrayList\u003cCensusTract\u003e)(scope.getCensusTracts())).get(j))).getCounty())).getPopulation())/(float)(((CensusTract)(((ArrayList\u003cCensusTract\u003e)(scope.getCensusTracts())).get(j))).getPopulation())));\n\t\t\t\t\t\t\t\t\t//println(\"add: \"+(int)(((DailyConfirmedCases)(dailyConfirmedCases.get(d))).getNumActiveCases()*((float)(((County)(((CensusTract)(((ArrayList\u003cCensusTract\u003e)(scope.getCensusTracts())).get(j))).getCounty())).getPopulation())/(float)(((CensusTract)(((ArrayList\u003cCensusTract\u003e)(scope.getCensusTracts())).get(j))).getPopulation()))));\n\t\t\t\t\t\t\t\t\tnumActiveInfected\u003dnumActiveInfected+(int)((((DailyConfirmedCases)(dailyConfirmedCases.get(d))).getNumActiveCases())*((float)(((CensusTract)(((ArrayList\u003cCensusTract\u003e)(scope.getCensusTracts())).get(j))).getPopulation())/(float)(((County)(((CensusTract)(((ArrayList\u003cCensusTract\u003e)(scope.getCensusTracts())).get(j))).getCounty())).getPopulation())));\n\t\t\t\t\t\t\t\t\t//println(d);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}else{\n\t\t\t\tSystem.out.println(\"Infection for less than county level not implemented yet!\");\n\t\t\t}\n\t\t\t\n\t\t\tdata.append(currentDate.toString());\n\t\t\tdata.append(\",\");\n\t\t\tdata.append(statusSusceptible);\n\t\t\tdata.append(\",\");\n\t\t\tdata.append(statusExposed);\n\t\t\tdata.append(\",\");\n\t\t\tdata.append(statusInfected_sym);\n\t\t\tdata.append(\",\");\n\t\t\tdata.append(statusInfected_asym);\n\t\t\tdata.append(\",\");\n\t\t\tdata.append(statusRecovered);\n\t\t\tdata.append(\",\");\n\t\t\tdata.append(statusDead);\n\t\t\tdata.append(\",\");\n\t\t\tdata.append(statusUnknown);\n\t\t\tdata.append(\",\");\n\t\t\tint residentPop\u003d(int)(((Agent)((((AgentBasedModel)(modelRoot.getABM())).getRootAgent()))).getPropertyValue(\"residentPopulation\"));\n\t\t\tdata.append((float)(statusInfected_sym+statusInfected_asym)/(float)(residentPop));\n\t\t\tdata.append(\",\");\n\t\t\t//println(\"^^^\");\n\t\t\t//println(numActiveInfected);\n\t\t\tdata.append(numActiveInfected);\n\t\t\tdata.append(\",\");\n\t\t\tdata.append((float)(numActiveInfected)/(float)(scopePopulation));\n\t\t\tdata.append(\"\\n\");\n     \t\tFile f1 \u003d new File(\"./output.csv\");\n     \t\tif(!f1.exists()) {\n        \t\t\tf1.createNewFile();\n     \t\t}\n\n     \t\tFileWriter fileWritter \u003d new FileWriter(f1.getName(),true);\n     \t\tBufferedWriter bw \u003d new BufferedWriter(fileWritter);\n     \t\tbw.write(data.toString());\n     \t\tbw.close();\n     \t\t//System.out.println(\"Done\");\n\t\t} catch(IOException e){\n      \t\te.printStackTrace();\n\t\t}\n\t\tcurrentAgent.setPropertyValue(\"counter\",(int)(currentAgent.getPropertyValue(\"counter\"))+1);\n\t\tif(((int)(currentAgent.getPropertyValue(\"counter\")))\u003d\u003d50){\n\t\t\tprintln(\"WRITING CBG NUMBERS!\");\n\t\t\tCopyOnWriteArrayList\u003cAgent\u003e agents\u003d((AgentBasedModel)(modelRoot.getABM())).getAgents();\n\t\t\tfor(int i\u003d0;i\u003cagents.size();i++){\n\t\t\t\tif(((String)(((AgentTemplate)(agents.get(i).getMyTemplate())).getAgentTypeName())).equals(\"CBG\")){\n\t\t\t\t\t((Agent)(agents.get(i))).setPropertyValue(\"N\",0);\n\t\t\t\t\t((Agent)(agents.get(i))).setPropertyValue(\"S\",0);\n\t\t\t\t\t((Agent)(agents.get(i))).setPropertyValue(\"E\",0);\n\t\t\t\t\t((Agent)(agents.get(i))).setPropertyValue(\"IS\",0);\n\t\t\t\t\t((Agent)(agents.get(i))).setPropertyValue(\"IAS\",0);\n\t\t\t\t\t((Agent)(agents.get(i))).setPropertyValue(\"R\",0);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t\n\t\t\tfor(int i\u003d0;i\u003cagents.size();i++){\n\t\t\t\t//println(\"!!!\");\n\t\t\t\tif(((String)(((AgentTemplate)(agents.get(i).getMyTemplate())).getAgentTypeName())).equals(\"Person\")){\n\t\t\t\t\tif(((Agent)agents.get(i)).getPropertyValue(\"cBG\")!\u003dnull){\n\t\t\t\t\t\tint status\u003d(int)(((Agent)(agents.get(i))).getPropertyValue(\"status\"));\n\t\t\t\t\t\t//println(\"status: \"+status);\n\t\t\t\t\t\tif(status\u003d\u003d0){\n//\t\t\t\t\t\t\tstatusSusceptible\u003dstatusSusceptible+1;\n\t\t\t\t\t\t\t((Agent)(((Agent)agents.get(i)).getPropertyValue(\"cBG\"))).setPropertyValue(\"N\",((int)(((Agent)(((Agent)agents.get(i)).getPropertyValue(\"cBG\"))).getPropertyValue(\"N\")))+1);\n\t\t\t\t\t\t}else if(status\u003d\u003d1){\n\t\t\t\t\t\t\t((Agent)(((Agent)agents.get(i)).getPropertyValue(\"cBG\"))).setPropertyValue(\"E\",((int)(((Agent)(((Agent)agents.get(i)).getPropertyValue(\"cBG\"))).getPropertyValue(\"E\")))+1);\n\t\t\t\t\t\t}else if(status\u003d\u003d2){\n\t\t\t\t\t\t\t((Agent)(((Agent)agents.get(i)).getPropertyValue(\"cBG\"))).setPropertyValue(\"IS\",((int)(((Agent)(((Agent)agents.get(i)).getPropertyValue(\"cBG\"))).getPropertyValue(\"IS\")))+1);\n\t\t\t\t\t\t}else if(status\u003d\u003d3){\n\t\t\t\t\t\t\t((Agent)(((Agent)agents.get(i)).getPropertyValue(\"cBG\"))).setPropertyValue(\"IAS\",((int)(((Agent)(((Agent)agents.get(i)).getPropertyValue(\"cBG\"))).getPropertyValue(\"IAS\")))+1);\n\t\t\t\t\t\t}else if(status\u003d\u003d4){\n\t\t\t\t\t\t\t((Agent)(((Agent)agents.get(i)).getPropertyValue(\"cBG\"))).setPropertyValue(\"R\",((int)(((Agent)(((Agent)agents.get(i)).getPropertyValue(\"cBG\"))).getPropertyValue(\"R\")))+1);\n\t\t\t\t\t\t}else if(status\u003d\u003d5){\n\t\t\t\t\t\t\t//statusDead\u003dstatusDead+1;\n\t\t\t\t\t\t}else if(status\u003d\u003d-1){\n\t\t\t\t\t\t\t//statusUnknown\u003dstatusUnknown+1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}else{\n\t\t\t\t\t\tCensusBlockGroup homeCBG\u003d((CensusBlockGroup)(((Agent)agents.get(i)).getPropertyValue(\"home\")));\n\t\t\t\t\t\tint status\u003d(int)(((Agent)(agents.get(i))).getPropertyValue(\"status\"));\n\t\t\t\t\t\tfor(int j\u003d0;j\u003cagents.size();j++){\n\t\t\t\t\t\t\tif(((String)(((AgentTemplate)(agents.get(j).getMyTemplate())).getAgentTypeName())).equals(\"CBG\")){\n\t\t\t\t\t\t\t\tif(((CensusBlockGroup)(((Agent)(agents.get(j))).getPropertyValue(\"cbgVal\"))).getId()\u003d\u003dhomeCBG.getId()){\n\t\t\t\t\t\t\t\t\tif(status\u003d\u003d0){\n//\t\t\t\t\t\t\t\t\t\tstatusSusceptible\u003dstatusSusceptible+1;\n\t\t\t\t\t\t\t\t\t\t((Agent)agents.get(j)).setPropertyValue(\"N\",((int)(((Agent)agents.get(j)).getPropertyValue(\"N\")))+1);\n\t\t\t\t\t\t\t\t\t}else if(status\u003d\u003d1){\n\t\t\t\t\t\t\t\t\t\t((Agent)agents.get(j)).setPropertyValue(\"E\",((int)(((Agent)agents.get(j)).getPropertyValue(\"E\")))+1);\n\t\t\t\t\t\t\t\t\t}else if(status\u003d\u003d2){\n\t\t\t\t\t\t\t\t\t\t((Agent)agents.get(j)).setPropertyValue(\"IS\",((int)(((Agent)agents.get(j)).getPropertyValue(\"IS\")))+1);\n\t\t\t\t\t\t\t\t\t}else if(status\u003d\u003d3){\n\t\t\t\t\t\t\t\t\t\t((Agent)agents.get(j)).setPropertyValue(\"IAS\",((int)(((Agent)agents.get(j)).getPropertyValue(\"IAS\")))+1);\n\t\t\t\t\t\t\t\t\t}else if(status\u003d\u003d4){\n\t\t\t\t\t\t\t\t\t\t((Agent)agents.get(j)).setPropertyValue(\"R\",((int)(((Agent)agents.get(j)).getPropertyValue(\"R\")))+1);\n\t\t\t\t\t\t\t\t\t}else if(status\u003d\u003d5){\n\t\t\t\t\t\t\t\t\t\t//statusDead\u003dstatusDead+1;\n\t\t\t\t\t\t\t\t\t}else if(status\u003d\u003d-1){\n\t\t\t\t\t\t\t\t\t\t//statusUnknown\u003dstatusUnknown+1;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/*\n\tif(((int)(currentAgent.getPropertyValue(\"counter\")))\u003d\u003d50){\n\t\tStringBuilder data \u003d new StringBuilder();\n\t\tdata.append(\"CBG,N,S,E,IS,IAS,R\\n\");\n\t\tCopyOnWriteArrayList\u003cAgent\u003e agents\u003d((AgentBasedModel)(modelRoot.getABM())).getAgents();\n\t\tfor(int i\u003d0;i\u003cagents.size();i++){\n\t\t\tif(((String)(((AgentTemplate)(agents.get(i).getMyTemplate())).getAgentTypeName())).equals(\"CBG\")){\n\t\t\t\tint N\u003d((int)(((Agent)(agents.get(i))).getPropertyValue(\"N\")));\n\t\t\t\tint S\u003d((int)(((Agent)(agents.get(i))).getPropertyValue(\"S\")));\n\t\t\t\tint E\u003d((int)(((Agent)(agents.get(i))).getPropertyValue(\"E\")));\n\t\t\t\tint IS\u003d((int)(((Agent)(agents.get(i))).getPropertyValue(\"IS\")));\n\t\t\t\tint IAS\u003d((int)(((Agent)(agents.get(i))).getPropertyValue(\"IAS\")));\n\t\t\t\tint R\u003d((int)(((Agent)(agents.get(i))).getPropertyValue(\"R\")));\n\t\t\t\tdata.append(((CensusBlockGroup)(((Agent)(agents.get(i))).getPropertyValue(\"cbgVal\"))).getId());\n\t\t\t\tdata.append(\",\");\n\t\t\t\tdata.append(N);\n\t\t\t\tdata.append(\",\");\n\t\t\t\tdata.append(S);\n\t\t\t\tdata.append(\",\");\n\t\t\t\tdata.append(E);\n\t\t\t\tdata.append(\",\");\n\t\t\t\tdata.append(IS);\n\t\t\t\tdata.append(\",\");\n\t\t\t\tdata.append(IAS);\n\t\t\t\tdata.append(\",\");\n\t\t\t\tdata.append(R);\n\t\t\t\tdata.append(\"\\n\");\n\t\t\t}\n\t\t}\n\t\tprintln(\"WRITING CBG NUMBERS!\");\n\n\t\tFile f1 \u003d new File(\"./output_CBGs.csv\");\n     \tif(!f1.exists()) {\n        \t\tf1.createNewFile();\n     \t}\n\n     \tFileWriter fileWritter \u003d new FileWriter(f1.getName(),false);\n     \tBufferedWriter bw \u003d new BufferedWriter(fileWritter);\n     \tbw.write(data.toString());\n     \tbw.close();\n\t}\n\t*/\n\t\n}\n"
        },
        "pythonScript": {
          "script": "#currentTime\u003droot.getABM().getCurrentTime();\n#print(currentTime.getMinute());"
        },
        "isJavaScriptActive": true
      },
      "canRunBehaviorParallel": false
    },
    {
      "agentTypeName": "CBG",
      "statusNames": [
        "DEFAULT_UNKNOWN"
      ],
      "statusValues": [
        -1
      ],
      "agentProperties": [
        {
          "propertyName": "N",
          "propertyType": "Integer"
        },
        {
          "propertyName": "S",
          "propertyType": "Integer"
        },
        {
          "propertyName": "E",
          "propertyType": "Integer"
        },
        {
          "propertyName": "IS",
          "propertyType": "Integer"
        },
        {
          "propertyName": "R",
          "propertyType": "Integer"
        },
        {
          "propertyName": "cbgVal",
          "propertyType": "CensusBlockGroup"
        },
        {
          "propertyName": "lat",
          "propertyType": "Double"
        },
        {
          "propertyName": "lon",
          "propertyType": "Double"
        },
        {
          "propertyName": "IAS",
          "propertyType": "Integer"
        }
      ],
      "constructor": {
        "javaScript": {
          "script": "//println(\"I\u0027M BORN!\");"
        },
        "pythonScript": {
          "script": ""
        },
        "isJavaScriptActive": true
      },
      "destructor": {
        "javaScript": {
          "script": ""
        },
        "pythonScript": {
          "script": ""
        },
        "isJavaScriptActive": true
      },
      "behavior": {
        "javaScript": {
          "script": "import java.time.ZonedDateTime;\n\n//println(\"N\"+currentAgent.getPropertyValue(\"N\"));\n//println(\"S\"+currentAgent.getPropertyValue(\"S\"));\n//println(\"E\"+currentAgent.getPropertyValue(\"E\"));\n//println(\"IS\"+currentAgent.getPropertyValue(\"IS\"));\n//println(\"IAS\"+currentAgent.getPropertyValue(\"IAS\"));\n//println(\"R\"+currentAgent.getPropertyValue(\"R\"));\n\n\n//(Agent)(currentAgent.getPropertyValue(\"cBG\"))"
        },
        "pythonScript": {
          "script": "for i in range(10):\n\tcurrentTime\u003dmodelRoot.getABM().getCurrentTime()\n\t#print(\"GENERATED NUMBER: \"+Math.random()*currentTime.getMinute());\n\tagentRoot.setPropertyValue(\"number\",Math.random()*currentTime.getMinute())\n#print(\"OUT LOOP PROPERTY: \"+agentRoot[0].getPropertyValue(\"number\"));\n",
          "generatedScriptLocation": "./tempPython_0.py"
        },
        "isJavaScriptActive": true
      },
      "canRunBehaviorParallel": false
    },
    {
      "agentTypeName": "Person",
      "statusNames": [
        "DEFAULT_UNKNOWN",
        "SUSCEPTIBLE",
        "EXPOSED",
        "INFECTED_SYM",
        "INFECTED_ASYM",
        "RECOVERED",
        "DEAD"
      ],
      "statusValues": [
        -1,
        0,
        1,
        2,
        3,
        4,
        5
      ],
      "agentProperties": [
        {
          "propertyName": "home",
          "propertyType": "CensusBlockGroup"
        },
        {
          "propertyName": "status",
          "propertyType": "Integer"
        },
        {
          "propertyName": "currentLocation",
          "propertyType": "CensusBlockGroup"
        },
        {
          "propertyName": "lat",
          "propertyType": "Double"
        },
        {
          "propertyName": "lon",
          "propertyType": "Double"
        },
        {
          "propertyName": "minutesStayed",
          "propertyType": "Integer"
        },
        {
          "propertyName": "destinationPlaces",
          "propertyType": "ArrayList"
        },
        {
          "propertyName": "destinationPlacesFreq",
          "propertyType": "ArrayList"
        },
        {
          "propertyName": "travelStartDecisionCounter",
          "propertyType": "Integer"
        },
        {
          "propertyName": "cumulativeDestinationFreqs",
          "propertyType": "Integer"
        },
        {
          "propertyName": "cBG",
          "propertyType": "CensusBlockGroup"
        },
        {
          "propertyName": "dstIndex",
          "propertyType": "Integer"
        },
        {
          "propertyName": "dwellTime",
          "propertyType": "Integer"
        },
        {
          "propertyName": "dayCBG",
          "propertyType": "CensusBlockGroup"
        },
        {
          "propertyName": "isAtWork",
          "propertyType": "Boolean"
        },
        {
          "propertyName": "minutesSick",
          "propertyType": "Integer"
        },
        {
          "propertyName": "minutesTravelToWorkFrom7",
          "propertyType": "Integer"
        },
        {
          "propertyName": "minutesTravelFromWorkFrom16",
          "propertyType": "Integer"
        },
        {
          "propertyName": "isDestinedToDeath",
          "propertyType": "Boolean"
        },
        {
          "propertyName": "isPotentiallyWorkAtHome",
          "propertyType": "Boolean"
        }
      ],
      "constructor": {
        "javaScript": {
          "script": "//import COVID_AgentBasedSimulation.Model.AgentBasedModel.Agent;\n//\n//println(\"!!!\");\n//Agent currentAgent\u003dmodelRoot.getABM().getCurrentAgent();\n//println(currentAgent);\n//ArrayList destFreqs\u003dcurrentAgent.getPropertyValue(\"destinationPlacesFreq\");\n//println(destFreqs);\n//int cumulativeDestinationFreqs\u003d0;\n//for(int i\u003d0;i\u003cdestFreqs.size();i++){\n//\tcumulativeDestinationFreqs\u003dcumulativeDestinationFreqs+destFreqs.get(i);\n//}\n//println(\"????\");\n//currentAgent.setPropertyValue(\"cumulativeDestinationFreqs\",new Integer(cumulativeDestinationFreqs));"
        },
        "pythonScript": {
          "script": ""
        },
        "isJavaScriptActive": true
      },
      "destructor": {
        "javaScript": {
          "script": ""
        },
        "pythonScript": {
          "script": ""
        },
        "isJavaScriptActive": true
      },
      "behavior": {
        "javaScript": {
          "script": "import COVID_AgentBasedSimulation.Model.AgentBasedModel.Agent;\nimport COVID_AgentBasedSimulation.Model.Structure.CensusBlockGroup;\nimport COVID_AgentBasedSimulation.Model.Data.Safegraph.SafegraphPlace;\nimport COVID_AgentBasedSimulation.Model.MainModel;\nimport COVID_AgentBasedSimulation.Model.Data.Safegraph.PatternsRecordProcessed;\nimport COVID_AgentBasedSimulation.Model.Data.Safegraph.DwellTime;\nimport COVID_AgentBasedSimulation.Model.AgentBasedModel.AgentTemplate;\nimport COVID_AgentBasedSimulation.Model.AgentBasedModel.AgentBasedModel;\nimport java.util.concurrent.CopyOnWriteArrayList;\nimport groovy.transform.CompileStatic;\n\nimport java.time.ZonedDateTime;\n\nenum statusEnum{\n\tSUSCEPTIBLE, EXPOSED, INFECTED_SYM, INFECTED_ASYM, RECOVERED, DEAD;\n}\n\n//Agent currentAgent\u003dcurrentAgent;\n//println(\"START \"+currentAgent.getMyIndex());\n\nrun(currentAgent, modelRoot, modelRoot.getABM().getCurrentTime());\n\n@CompileStatic\ndef run(Agent currentAgent, MainModel rootModel, ZonedDateTime currentTime){\n\n//println((((AgentTemplate)(currentAgent.getMyTemplate())).getAgentTypeName()));\n\n//if(currentAgent.getPropertyValue(\"status\")\u003d\u003dnull){\n//\tprintln(\"!!!: \");\n//\tprintln(currentAgent.getPropertyValue(\"status\"));\n//}\nif((int)(currentAgent.getPropertyValue(\"status\"))\u003d\u003dstatusEnum.DEAD.ordinal()){\n\treturn;//YOU ARE DEAD ALREADY\n}\n\n\n//Agent currentAgent\u003dmodelRoot.getABM().getCurrentAgent();\n//println(\"S\");\n//println(currentAgent.getPropertyValue(\"travelStartDecisionCounter\"));\n\nint travelStartDecisionCounter\u003d(Integer)(currentAgent.getPropertyValue(\"travelStartDecisionCounter\"));\nCensusBlockGroup currentLocation\u003d(CensusBlockGroup)currentAgent.getPropertyValue(\"currentLocation\");\ntravelStartDecisionCounter\u003dtravelStartDecisionCounter+1;\nint dstIndex\u003d(Integer)(currentAgent.getPropertyValue(\"dstIndex\"));\n\n//int dstIndex\u003d-1;\n\n//println(dstIndex);\nif(dstIndex \u003d\u003d -1){\n\t//println(\"@@@\");\n\tif(travelStartDecisionCounter\u003eMath.random()*0){\n\t\tint cumulativeDestinationFreqs\u003d(Integer)currentAgent.getPropertyValue(\"cumulativeDestinationFreqs\");\n\t\tint destinationCumulativeThresh\u003d(int)(Math.floor(Math.random()*cumulativeDestinationFreqs));\n\t\t//println(\"cumulativeDestinationFreqs: \"+cumulativeDestinationFreqs);\n\t\t//println(\"destinationCumulativeThreshooo: \"+destinationCumulativeThresh);\n\t\tint destinationCumulative\u003d0;\n\t\tint destination\u003d-1;\n\t\tArrayList destFreqs\u003d(ArrayList)currentAgent.getPropertyValue(\"destinationPlacesFreq\");\n\t\tfor(int i\u003d0;i\u003cdestFreqs.size();i++){\n\t\t\tdestinationCumulative\u003ddestinationCumulative+(int)destFreqs.get(i);\n\t\t\t//println(\"dest loop: \"+destinationCumulative);\n\t\t\t//println(\"destinationCumulativeThresh: \"+(destinationCumulativeThresh-1));\n\t\t\tif(destinationCumulative\u003e\u003d(destinationCumulativeThresh-1)){\n\t\t\t\tdestination\u003di;\n\t\t\t\t//println(\"dest break: \"+destination);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tint dayInMonth\u003dcurrentTime.getDayOfMonth()-1;\n\t\tint sumCDF\u003d0;\n\t\tfor(int i\u003d0;i\u003c((PatternsRecordProcessed)(((ArrayList)currentAgent.getPropertyValue(\"destinationPlaces\")).get(destination))).visits_by_day.length;i++){\n\t\t\tsumCDF\u003dsumCDF+((PatternsRecordProcessed)(((ArrayList)currentAgent.getPropertyValue(\"destinationPlaces\")).get(destination))).visits_by_day[i];\n\t\t}\n\t\tint numVisitInDay\u003d((PatternsRecordProcessed)(((ArrayList)currentAgent.getPropertyValue(\"destinationPlaces\")).get(destination))).visits_by_day[dayInMonth];\n\t\tif(Math.random()\u003c((float)numVisitInDay/(float)sumCDF)){\n\t\t\t//println(\"123\");\n\t\t\tbyte dayInWeek\u003d(byte)((currentTime.getDayOfWeek().getValue())-1);\n\t\t\tsumCDF\u003d0;\n\t\t\tfor(byte i\u003d0;i\u003c7;i++){\n\t\t\t\tif((((HashMap)((PatternsRecordProcessed)(((ArrayList)currentAgent.getPropertyValue(\"destinationPlaces\")).get(destination))).popularity_by_day).get(i))\u003d\u003dnull){\n\t\t\t\t\tprintln(\"PROBLEM in index: \"+i);\n\t\t\t\t}\n\t\t\t\tsumCDF\u003dsumCDF+(Integer)(((HashMap)((PatternsRecordProcessed)(((ArrayList)currentAgent.getPropertyValue(\"destinationPlaces\")).get(destination))).popularity_by_day).get(i));\n\t\t\t\t//println(\"345\");\n\t\t\t}\n\t\t\tint numVisitsInWeekDay\u003d((HashMap)((PatternsRecordProcessed)(((ArrayList)currentAgent.getPropertyValue(\"destinationPlaces\")).get(destination))).popularity_by_day).get(dayInWeek)\n\t\t\tif(Math.random()\u003c((float)numVisitsInWeekDay/(float)sumCDF)){\n\t\t\t\tint hourInDay\u003dcurrentTime.getHour()-1;\n\t\t\t\tsumCDF\u003d0;\n\t\t\t\tfor(int i\u003d0;i\u003c((PatternsRecordProcessed)(((ArrayList)currentAgent.getPropertyValue(\"destinationPlaces\")).get(destination))).popularity_by_hour.length;i++){\n\t\t\t\t\tsumCDF\u003dsumCDF+((PatternsRecordProcessed)(((ArrayList)currentAgent.getPropertyValue(\"destinationPlaces\")).get(destination))).popularity_by_hour[i];\n\t\t\t\t}\n\t\t\t\tint numVisitInHour\u003d((PatternsRecordProcessed)(((ArrayList)currentAgent.getPropertyValue(\"destinationPlaces\")).get(destination))).popularity_by_hour[hourInDay];\n\t\t\t\t//\\/\\/\\/ GO TO TRAVEL\n\t\t\t\tif(Math.random()\u003c((float)numVisitInHour/(float)sumCDF)){\n\t\t\t\t\t//println(\"traveled!!! \"+currentAgent.getMyIndex());\n\t\t\t\t\t//println(currentTime.getMinute());\n\t\t\t\t\ttravelStartDecisionCounter\u003d0;\n\t\t\t\t\tcurrentLocation\u003d((CensusBlockGroup)((SafegraphPlace)(((PatternsRecordProcessed)(((ArrayList)currentAgent.getPropertyValue(\"destinationPlaces\")).get(destination))).getPlace())).getCensusBlock());\n\t\t\t\t\tcurrentAgent.setPropertyValue(\"dstIndex\",destination);\n\t\t\t\t\tcurrentAgent.setPropertyValue(\"lat\",currentLocation.getLat());\n\t\t\t\t\tcurrentAgent.setPropertyValue(\"lon\",currentLocation.getLon());\n\n\t\t\t\t\tif(((Agent)(currentAgent.getPropertyValue(\"cBG\")))!\u003dnull){\n\t\t\t\t\t\t((Agent)(currentAgent.getPropertyValue(\"cBG\"))).setPropertyValue(\"N\",(int)(((Agent)(currentAgent.getPropertyValue(\"cBG\"))).getPropertyValue(\"N\"))-1);\n\t\t\t\t\t\tif((int)(currentAgent.getPropertyValue(\"status\"))\u003d\u003dstatusEnum.SUSCEPTIBLE.ordinal()){\n\t\t\t\t\t\t\t((Agent)(currentAgent.getPropertyValue(\"cBG\"))).setPropertyValue(\"S\",(int)(((Agent)(currentAgent.getPropertyValue(\"cBG\"))).getPropertyValue(\"S\"))-1);\n\t\t\t\t\t\t}else if((int)(currentAgent.getPropertyValue(\"status\"))\u003d\u003dstatusEnum.EXPOSED.ordinal()){\n\t\t\t\t\t\t\t((Agent)(currentAgent.getPropertyValue(\"cBG\"))).setPropertyValue(\"E\",(int)(((Agent)(currentAgent.getPropertyValue(\"cBG\"))).getPropertyValue(\"E\"))-1);\n\t\t\t\t\t\t}else if((int)(currentAgent.getPropertyValue(\"status\"))\u003d\u003dstatusEnum.INFECTED_SYM.ordinal()){\n\t\t\t\t\t\t\t((Agent)(currentAgent.getPropertyValue(\"cBG\"))).setPropertyValue(\"IS\",(int)(((Agent)(currentAgent.getPropertyValue(\"cBG\"))).getPropertyValue(\"IS\"))-1);\n\t\t\t\t\t\t}else if((int)(currentAgent.getPropertyValue(\"status\"))\u003d\u003dstatusEnum.INFECTED_ASYM.ordinal()){\n\t\t\t\t\t\t\t((Agent)(currentAgent.getPropertyValue(\"cBG\"))).setPropertyValue(\"IAS\",(int)(((Agent)(currentAgent.getPropertyValue(\"cBG\"))).getPropertyValue(\"IAS\"))-1);\n\t\t\t\t\t\t}else if((int)(currentAgent.getPropertyValue(\"status\"))\u003d\u003dstatusEnum.RECOVERED.ordinal()){\n\t\t\t\t\t\t\t((Agent)(currentAgent.getPropertyValue(\"cBG\"))).setPropertyValue(\"R\",(int)(((Agent)(currentAgent.getPropertyValue(\"cBG\"))).getPropertyValue(\"R\"))-1);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tfor(int n\u003d0;n\u003c((CopyOnWriteArrayList\u003cAgent\u003e)(((AgentBasedModel)(rootModel.getABM())).getAgents())).size();n++){\n\t\t\t\t\t\t//println(\"%%%\");\n\t\t\t\t\t\tif(((String)(((AgentTemplate)(((Agent)(((CopyOnWriteArrayList\u003cAgent\u003e)(((AgentBasedModel)(rootModel.getABM())).getAgents())).get(n))).getMyTemplate())).getAgentTypeName())).equals(\"CBG\")){\n\t\t\t\t\t\t\tif(currentLocation.getId()\u003d\u003d((CensusBlockGroup)(((Agent)(((CopyOnWriteArrayList\u003cAgent\u003e)(((AgentBasedModel)(rootModel.getABM())).getAgents())).get(n))).getPropertyValue(\"cbgVal\"))).getId()){\n\t\t\t\t\t\t\t\tcurrentAgent.setPropertyValue(\"cBG\", ((Agent)(((CopyOnWriteArrayList\u003cAgent\u003e)(((AgentBasedModel)(rootModel.getABM())).getAgents())).get(n))));\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif(((Agent)(currentAgent.getPropertyValue(\"cBG\")))!\u003dnull){\n\t\t\t\t\t\t((Agent)(currentAgent.getPropertyValue(\"cBG\"))).setPropertyValue(\"N\",(int)(((Agent)(currentAgent.getPropertyValue(\"cBG\"))).getPropertyValue(\"N\"))+1);\n\t\t\t\t\t\tif((int)(currentAgent.getPropertyValue(\"status\"))\u003d\u003dstatusEnum.SUSCEPTIBLE.ordinal()){\n\t\t\t\t\t\t\t((Agent)(currentAgent.getPropertyValue(\"cBG\"))).setPropertyValue(\"S\",(int)(((Agent)(currentAgent.getPropertyValue(\"cBG\"))).getPropertyValue(\"S\"))+1);\n\t\t\t\t\t\t}else if((int)(currentAgent.getPropertyValue(\"status\"))\u003d\u003dstatusEnum.EXPOSED.ordinal()){\n\t\t\t\t\t\t\t((Agent)(currentAgent.getPropertyValue(\"cBG\"))).setPropertyValue(\"E\",(int)(((Agent)(currentAgent.getPropertyValue(\"cBG\"))).getPropertyValue(\"E\"))+1);\n\t\t\t\t\t\t}else if((int)(currentAgent.getPropertyValue(\"status\"))\u003d\u003dstatusEnum.INFECTED_SYM.ordinal()){\n\t\t\t\t\t\t\t((Agent)(currentAgent.getPropertyValue(\"cBG\"))).setPropertyValue(\"IS\",(int)(((Agent)(currentAgent.getPropertyValue(\"cBG\"))).getPropertyValue(\"IS\"))+1);\n\t\t\t\t\t\t}else if((int)(currentAgent.getPropertyValue(\"status\"))\u003d\u003dstatusEnum.INFECTED_ASYM.ordinal()){\n\t\t\t\t\t\t\t((Agent)(currentAgent.getPropertyValue(\"cBG\"))).setPropertyValue(\"IAS\",(int)(((Agent)(currentAgent.getPropertyValue(\"cBG\"))).getPropertyValue(\"IAS\"))+1);\n\t\t\t\t\t\t}else if((int)(currentAgent.getPropertyValue(\"status\"))\u003d\u003dstatusEnum.RECOVERED.ordinal()){\n\t\t\t\t\t\t\t((Agent)(currentAgent.getPropertyValue(\"cBG\"))).setPropertyValue(\"R\",(int)(((Agent)(currentAgent.getPropertyValue(\"cBG\"))).getPropertyValue(\"R\"))+1);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\n\t\t\t\t\t//CALCULATE THE STAYING TIME\n\t\t\t\t\tsumCDF\u003d0;\n\t\t\t\t\tfor(int i\u003d0;i\u003c((ArrayList)((PatternsRecordProcessed)(((ArrayList)currentAgent.getPropertyValue(\"destinationPlaces\")).get(destination))).bucketed_dwell_times).size();i++){\n\t\t\t\t\t\tsumCDF\u003dsumCDF+((DwellTime)((ArrayList)((PatternsRecordProcessed)(((ArrayList)currentAgent.getPropertyValue(\"destinationPlaces\")).get(destination))).bucketed_dwell_times).get(i)).getNumber();\n\t\t\t\t\t}\n\t\t\t\t\tint stayTimeThresh\u003d(int)(Math.floor(Math.random()*sumCDF));\n\t\t\t\t\tint stayTimeCumulative\u003d0;\n\n\t\t\t\t\t//println(stayTimeThresh);\n\t\t\t\t\t\n\t\t\t\t\tfor(int i\u003d0;i\u003c((ArrayList)((PatternsRecordProcessed)(((ArrayList)currentAgent.getPropertyValue(\"destinationPlaces\")).get(destination))).bucketed_dwell_times).size();i++){\n\t\t\t\t\t\tstayTimeCumulative\u003dstayTimeCumulative+((DwellTime)((ArrayList)((PatternsRecordProcessed)(((ArrayList)currentAgent.getPropertyValue(\"destinationPlaces\")).get(destination))).bucketed_dwell_times).get(i)).getNumber();\n\t\t\t\t\t\t//println(\"stay loop: \"+stayTimeCumulative);\n\t\t\t\t\t\t//println(\"stayTimeThresh: \"+(stayTimeThresh-1));\n\t\t\t\t\t\tif(stayTimeCumulative\u003e\u003d(stayTimeThresh-1)){\n\t\t\t\t\t\t\t//destination\u003di;\n\t\t\t\t\t\t\t//println(\"DWELL TIME SET! \"+currentAgent.getMyIndex());\n\t\t\t\t\t\t\tcurrentAgent.setPropertyValue(\"dwellTime\",((ArrayList)((PatternsRecordProcessed)(((ArrayList)currentAgent.getPropertyValue(\"destinationPlaces\")).get(destination))).bucketed_dwell_times).get(i));\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\t//^^^ GO TO TRAVEL\n\t\t\t}\n\t\t}\n\t\t\n\t\t//println(\"dest size: \"+currentAgent.getPropertyValue(\"destinationPlaces\").size());\n\t\t//println(\"dest: \"+destination);\n\t\t//currentLocation\u003d((CensusBlockGroup)((SafegraphPlace)(((PatternsRecordProcessed)(((ArrayList)currentAgent.getPropertyValue(\"destinationPlaces\")).get(destination))).getPlace())).getCensusBlock());\n\t\t//currentAgent.setPropertyValue(\"dstIndex\",destination);\n\t\t//currentAgent.setPropertyValue(\"lat\",currentLocation.getLat());\n\t\t//currentAgent.setPropertyValue(\"lon\",currentLocation.getLon());\n\t}\n}else{\n\t//println(\"%%%\");\n\t//UNIFORMLY RETURN BASED ON DWELL DURATION DETERMINED AT THE BEGINING OF THE TRAVEL\t\n\tDwellTime dwellTime\u003d(DwellTime)(currentAgent.getPropertyValue(\"dwellTime\"));\n\t//if(dwellTime\u003d\u003dnull){\n\t\t//println(\"DWELL TIME NOT FOUND! \"+currentAgent.getMyIndex());\n\t//}\n\t//\\/\\/\\/ RETURN FROM TRAVEL\n\tif(travelStartDecisionCounter\u003edwellTime.dwellDuration[0]){\n\t\tif(Math.random() \u003c (float)(travelStartDecisionCounter-dwellTime.dwellDuration[0])/(float)(dwellTime.dwellDuration[1]-dwellTime.dwellDuration[0])){\n\t\t\tif((boolean)currentAgent.getPropertyValue(\"isAtWork\")\u003d\u003dfalse){\n\t\t\t\tcurrentLocation\u003d(CensusBlockGroup)currentAgent.getPropertyValue(\"home\");\n\t\t\t\tif((int)(currentAgent.getPropertyValue(\"status\"))\u003d\u003dstatusEnum.EXPOSED.ordinal()){\n\t\t\t\t\tcurrentAgent.setPropertyValue(\"status\",statusEnum.SUSCEPTIBLE.ordinal());//NOW SAFE\n\t\t\t\t}\n\t\t\t}else{\n\t\t\t\tcurrentLocation\u003d(CensusBlockGroup)currentAgent.getPropertyValue(\"dayCBG\");\n\t\t\t}\n\t\t\t\n\t\t\tcurrentAgent.setPropertyValue(\"lat\",currentLocation.getLat());\n\t\t\tcurrentAgent.setPropertyValue(\"lon\",currentLocation.getLon());\n\t\t\ttravelStartDecisionCounter\u003d0;\n\t\t\tcurrentAgent.setPropertyValue(\"dstIndex\",-1);\n\n\t\t\tif(((Agent)(currentAgent.getPropertyValue(\"cBG\")))!\u003dnull){\n\t\t\t\t((Agent)(currentAgent.getPropertyValue(\"cBG\"))).setPropertyValue(\"N\",(int)(((Agent)(currentAgent.getPropertyValue(\"cBG\"))).getPropertyValue(\"N\"))-1);\n\t\t\t\tif((int)(currentAgent.getPropertyValue(\"status\"))\u003d\u003dstatusEnum.SUSCEPTIBLE.ordinal()){\n\t\t\t\t\t((Agent)(currentAgent.getPropertyValue(\"cBG\"))).setPropertyValue(\"S\",(int)(((Agent)(currentAgent.getPropertyValue(\"cBG\"))).getPropertyValue(\"S\"))-1);\n\t\t\t\t}else if((int)(currentAgent.getPropertyValue(\"status\"))\u003d\u003dstatusEnum.EXPOSED.ordinal()){\n\t\t\t\t\t((Agent)(currentAgent.getPropertyValue(\"cBG\"))).setPropertyValue(\"E\",(int)(((Agent)(currentAgent.getPropertyValue(\"cBG\"))).getPropertyValue(\"E\"))-1);\n\t\t\t\t}else if((int)(currentAgent.getPropertyValue(\"status\"))\u003d\u003dstatusEnum.INFECTED_SYM.ordinal()){\n\t\t\t\t\t((Agent)(currentAgent.getPropertyValue(\"cBG\"))).setPropertyValue(\"IS\",(int)(((Agent)(currentAgent.getPropertyValue(\"cBG\"))).getPropertyValue(\"IS\"))-1);\n\t\t\t\t}else if((int)(currentAgent.getPropertyValue(\"status\"))\u003d\u003dstatusEnum.INFECTED_ASYM.ordinal()){\n\t\t\t\t\t((Agent)(currentAgent.getPropertyValue(\"cBG\"))).setPropertyValue(\"IAS\",(int)(((Agent)(currentAgent.getPropertyValue(\"cBG\"))).getPropertyValue(\"IAS\"))-1);\n\t\t\t\t}else if((int)(currentAgent.getPropertyValue(\"status\"))\u003d\u003dstatusEnum.RECOVERED.ordinal()){\n\t\t\t\t\t((Agent)(currentAgent.getPropertyValue(\"cBG\"))).setPropertyValue(\"R\",(int)(((Agent)(currentAgent.getPropertyValue(\"cBG\"))).getPropertyValue(\"R\"))-1);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor(int n\u003d0;n\u003c((CopyOnWriteArrayList\u003cAgent\u003e)(((AgentBasedModel)(rootModel.getABM())).getAgents())).size();n++){\n\t\t\t\t//println(\"%%%\");\n\t\t\t\tif(((String)(((AgentTemplate)(((Agent)(((CopyOnWriteArrayList\u003cAgent\u003e)(((AgentBasedModel)(rootModel.getABM())).getAgents())).get(n))).getMyTemplate())).getAgentTypeName())).equals(\"CBG\")){\n\t\t\t\t\tif(currentLocation.getId()\u003d\u003d((CensusBlockGroup)(((Agent)(((CopyOnWriteArrayList\u003cAgent\u003e)(((AgentBasedModel)(rootModel.getABM())).getAgents())).get(n))).getPropertyValue(\"cbgVal\"))).getId()){\n\t\t\t\t\t\tcurrentAgent.setPropertyValue(\"cBG\", ((Agent)(((CopyOnWriteArrayList\u003cAgent\u003e)(((AgentBasedModel)(rootModel.getABM())).getAgents())).get(n))));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif(((Agent)(currentAgent.getPropertyValue(\"cBG\")))!\u003dnull){\n\t\t\t\t((Agent)(currentAgent.getPropertyValue(\"cBG\"))).setPropertyValue(\"N\",(int)(((Agent)(currentAgent.getPropertyValue(\"cBG\"))).getPropertyValue(\"N\"))+1);\n\t\t\t\tif((int)(currentAgent.getPropertyValue(\"status\"))\u003d\u003dstatusEnum.SUSCEPTIBLE.ordinal()){\n\t\t\t\t\t((Agent)(currentAgent.getPropertyValue(\"cBG\"))).setPropertyValue(\"S\",(int)(((Agent)(currentAgent.getPropertyValue(\"cBG\"))).getPropertyValue(\"S\"))+1);\n\t\t\t\t}else if((int)(currentAgent.getPropertyValue(\"status\"))\u003d\u003dstatusEnum.EXPOSED.ordinal()){\n\t\t\t\t\t((Agent)(currentAgent.getPropertyValue(\"cBG\"))).setPropertyValue(\"E\",(int)(((Agent)(currentAgent.getPropertyValue(\"cBG\"))).getPropertyValue(\"E\"))+1);\n\t\t\t\t}else if((int)(currentAgent.getPropertyValue(\"status\"))\u003d\u003dstatusEnum.INFECTED_SYM.ordinal()){\n\t\t\t\t\t((Agent)(currentAgent.getPropertyValue(\"cBG\"))).setPropertyValue(\"IS\",(int)(((Agent)(currentAgent.getPropertyValue(\"cBG\"))).getPropertyValue(\"IS\"))+1);\n\t\t\t\t}else if((int)(currentAgent.getPropertyValue(\"status\"))\u003d\u003dstatusEnum.INFECTED_ASYM.ordinal()){\n\t\t\t\t\t((Agent)(currentAgent.getPropertyValue(\"cBG\"))).setPropertyValue(\"IAS\",(int)(((Agent)(currentAgent.getPropertyValue(\"cBG\"))).getPropertyValue(\"IAS\"))+1);\n\t\t\t\t}else if((int)(currentAgent.getPropertyValue(\"status\"))\u003d\u003dstatusEnum.RECOVERED.ordinal()){\n\t\t\t\t\t((Agent)(currentAgent.getPropertyValue(\"cBG\"))).setPropertyValue(\"R\",(int)(((Agent)(currentAgent.getPropertyValue(\"cBG\"))).getPropertyValue(\"R\"))+1);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t//println(\"returned\");\n\t\t\t//println(\"returned!!! \"+currentAgent.getMyIndex());\n\t\t\t//println(currentTime.getMinute());\n\t\t}\n\t}\n\t//^^^ RETURN FROM TRAVEL\n}\n\n\n\ncurrentAgent.setPropertyValue(\"travelStartDecisionCounter\",travelStartDecisionCounter);\n//println(currentAgent.getPropertyValue(\"travelStartDecisionCounter\"));\n//println(\"E\");\n\nif(currentTime.getDayOfWeek().getValue()\u003c6){\n\t//\\/\\/\\/ GO TO WORK\n\tif((boolean)currentAgent.getPropertyValue(\"isAtWork\")\u003d\u003dfalse){\n\t\tif(currentTime.getHour()\u003c\u003d9 \u0026\u0026 currentTime.getHour()\u003e\u003d7){\n\t\t\tif(((int)currentAgent.getPropertyValue(\"minutesTravelToWorkFrom7\"))\u003d\u003d-1){\n\t\t\t\tint minutesTravelToWorkFrom7\u003d(int)(Math.random()*120);\n\t\t\t\tcurrentAgent.setPropertyValue(\"minutesTravelToWorkFrom7\",minutesTravelToWorkFrom7);\n\t\t\t}else{\n\t\t\t\tint passed\u003dcurrentTime.getMinute()+((int)(currentTime.getHour())-7)*60;\n\t\t\t\tif(passed\u003e(int)currentAgent.getPropertyValue(\"minutesTravelToWorkFrom7\")){\n\t\t\t\t\tcurrentLocation\u003d(CensusBlockGroup)currentAgent.getPropertyValue(\"dayCBG\");\n\t\t\t\t\tcurrentAgent.setPropertyValue(\"lat\",currentLocation.getLat());\n\t\t\t\t\tcurrentAgent.setPropertyValue(\"lon\",currentLocation.getLon());\n\t\t\t\t\tcurrentAgent.setPropertyValue(\"isAtWork\",true);\n\t\t\t\t\tcurrentAgent.setPropertyValue(\"minutesTravelFromWorkFrom16\",-1);\n\t\t\t\t\tif((int)(currentAgent.getPropertyValue(\"status\"))\u003d\u003dstatusEnum.SUSCEPTIBLE.ordinal()){\n\t\t\t\t\t\tcurrentAgent.setPropertyValue(\"status\",statusEnum.EXPOSED.ordinal());//NOW EXPOSED\n\t\t\t\t\t}\n\n\t\t\t\t\tif(((Agent)(currentAgent.getPropertyValue(\"cBG\")))!\u003dnull){\n\t\t\t\t\t\t((Agent)(currentAgent.getPropertyValue(\"cBG\"))).setPropertyValue(\"N\",(int)(((Agent)(currentAgent.getPropertyValue(\"cBG\"))).getPropertyValue(\"N\"))-1);\n\t\t\t\t\t\tif((int)(currentAgent.getPropertyValue(\"status\"))\u003d\u003dstatusEnum.SUSCEPTIBLE.ordinal()){\n\t\t\t\t\t\t\t((Agent)(currentAgent.getPropertyValue(\"cBG\"))).setPropertyValue(\"S\",(int)(((Agent)(currentAgent.getPropertyValue(\"cBG\"))).getPropertyValue(\"S\"))-1);\n\t\t\t\t\t\t}else if((int)(currentAgent.getPropertyValue(\"status\"))\u003d\u003dstatusEnum.EXPOSED.ordinal()){\n\t\t\t\t\t\t\t((Agent)(currentAgent.getPropertyValue(\"cBG\"))).setPropertyValue(\"E\",(int)(((Agent)(currentAgent.getPropertyValue(\"cBG\"))).getPropertyValue(\"E\"))-1);\n\t\t\t\t\t\t}else if((int)(currentAgent.getPropertyValue(\"status\"))\u003d\u003dstatusEnum.INFECTED_SYM.ordinal()){\n\t\t\t\t\t\t\t((Agent)(currentAgent.getPropertyValue(\"cBG\"))).setPropertyValue(\"IS\",(int)(((Agent)(currentAgent.getPropertyValue(\"cBG\"))).getPropertyValue(\"IS\"))-1);\n\t\t\t\t\t\t}else if((int)(currentAgent.getPropertyValue(\"status\"))\u003d\u003dstatusEnum.INFECTED_ASYM.ordinal()){\n\t\t\t\t\t\t\t((Agent)(currentAgent.getPropertyValue(\"cBG\"))).setPropertyValue(\"IAS\",(int)(((Agent)(currentAgent.getPropertyValue(\"cBG\"))).getPropertyValue(\"IAS\"))-1);\n\t\t\t\t\t\t}else if((int)(currentAgent.getPropertyValue(\"status\"))\u003d\u003dstatusEnum.RECOVERED.ordinal()){\n\t\t\t\t\t\t\t((Agent)(currentAgent.getPropertyValue(\"cBG\"))).setPropertyValue(\"R\",(int)(((Agent)(currentAgent.getPropertyValue(\"cBG\"))).getPropertyValue(\"R\"))-1);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tfor(int n\u003d0;n\u003c((CopyOnWriteArrayList\u003cAgent\u003e)(((AgentBasedModel)(rootModel.getABM())).getAgents())).size();n++){\n\t\t\t\t\t\t//println(\"%%%\");\n\t\t\t\t\t\tif(((String)(((AgentTemplate)(((Agent)(((CopyOnWriteArrayList\u003cAgent\u003e)(((AgentBasedModel)(rootModel.getABM())).getAgents())).get(n))).getMyTemplate())).getAgentTypeName())).equals(\"CBG\")){\n\t\t\t\t\t\t\tif(currentLocation.getId()\u003d\u003d((CensusBlockGroup)(((Agent)(((CopyOnWriteArrayList\u003cAgent\u003e)(((AgentBasedModel)(rootModel.getABM())).getAgents())).get(n))).getPropertyValue(\"cbgVal\"))).getId()){\n\t\t\t\t\t\t\t\tcurrentAgent.setPropertyValue(\"cBG\", ((Agent)(((CopyOnWriteArrayList\u003cAgent\u003e)(((AgentBasedModel)(rootModel.getABM())).getAgents())).get(n))));\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif(((Agent)(currentAgent.getPropertyValue(\"cBG\")))!\u003dnull){\n\t\t\t\t\t\t((Agent)(currentAgent.getPropertyValue(\"cBG\"))).setPropertyValue(\"N\",(int)(((Agent)(currentAgent.getPropertyValue(\"cBG\"))).getPropertyValue(\"N\"))+1);\n\t\t\t\t\t\tif((int)(currentAgent.getPropertyValue(\"status\"))\u003d\u003dstatusEnum.SUSCEPTIBLE.ordinal()){\n\t\t\t\t\t\t\t((Agent)(currentAgent.getPropertyValue(\"cBG\"))).setPropertyValue(\"S\",(int)(((Agent)(currentAgent.getPropertyValue(\"cBG\"))).getPropertyValue(\"S\"))+1);\n\t\t\t\t\t\t}else if((int)(currentAgent.getPropertyValue(\"status\"))\u003d\u003dstatusEnum.EXPOSED.ordinal()){\n\t\t\t\t\t\t\t((Agent)(currentAgent.getPropertyValue(\"cBG\"))).setPropertyValue(\"E\",(int)(((Agent)(currentAgent.getPropertyValue(\"cBG\"))).getPropertyValue(\"E\"))+1);\n\t\t\t\t\t\t}else if((int)(currentAgent.getPropertyValue(\"status\"))\u003d\u003dstatusEnum.INFECTED_SYM.ordinal()){\n\t\t\t\t\t\t\t((Agent)(currentAgent.getPropertyValue(\"cBG\"))).setPropertyValue(\"IS\",(int)(((Agent)(currentAgent.getPropertyValue(\"cBG\"))).getPropertyValue(\"IS\"))+1);\n\t\t\t\t\t\t}else if((int)(currentAgent.getPropertyValue(\"status\"))\u003d\u003dstatusEnum.INFECTED_ASYM.ordinal()){\n\t\t\t\t\t\t\t((Agent)(currentAgent.getPropertyValue(\"cBG\"))).setPropertyValue(\"IAS\",(int)(((Agent)(currentAgent.getPropertyValue(\"cBG\"))).getPropertyValue(\"IAS\"))+1);\n\t\t\t\t\t\t}else if((int)(currentAgent.getPropertyValue(\"status\"))\u003d\u003dstatusEnum.RECOVERED.ordinal()){\n\t\t\t\t\t\t\t((Agent)(currentAgent.getPropertyValue(\"cBG\"))).setPropertyValue(\"R\",(int)(((Agent)(currentAgent.getPropertyValue(\"cBG\"))).getPropertyValue(\"R\"))+1);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t\n\t\t\t\t\t//println(\"travelToWork!!!\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t//^^^ GO TO WORK\n\tif((boolean)currentAgent.getPropertyValue(\"isAtWork\")\u003d\u003dtrue){\n\t\t//\\/\\/\\/ RETURN FROM WORK\n\t\tif(currentTime.getHour()\u003c\u003d18 \u0026\u0026 currentTime.getHour()\u003e\u003d16){\n\t\t\tif(((int)currentAgent.getPropertyValue(\"minutesTravelFromWorkFrom16\"))\u003d\u003d-1){\n\t\t\t\tint minutesTravelFromWorkFrom16\u003d(int)(Math.random()*120);\n\t\t\t\tcurrentAgent.setPropertyValue(\"minutesTravelFromWorkFrom16\",minutesTravelFromWorkFrom16);\n\t\t\t}else{\n\t\t\t\tint passed\u003dcurrentTime.getMinute()+((int)(currentTime.getHour())-16)*60;\n\t\t\t}\n\t\t\tint passed\u003dcurrentTime.getMinute()+((int)(currentTime.getHour())-16)*60;\n\t\t\tif(passed\u003e(int)currentAgent.getPropertyValue(\"minutesTravelFromWorkFrom16\")){\n\t\t\t\tcurrentLocation\u003d(CensusBlockGroup)currentAgent.getPropertyValue(\"home\");\n\t\t\t\tcurrentAgent.setPropertyValue(\"lat\",currentLocation.getLat());\n\t\t\t\tcurrentAgent.setPropertyValue(\"lon\",currentLocation.getLon());\n\t\t\t\tcurrentAgent.setPropertyValue(\"isAtWork\",false);\n\t\t\t\tcurrentAgent.setPropertyValue(\"minutesTravelToWorkFrom7\",-1);\n\t\t\t\tif((int)(currentAgent.getPropertyValue(\"status\"))\u003d\u003dstatusEnum.EXPOSED.ordinal()){\n\t\t\t\t\tcurrentAgent.setPropertyValue(\"status\",statusEnum.SUSCEPTIBLE.ordinal());//NOW SAFE\n\t\t\t\t}\n\n\t\t\t\tif(((Agent)(currentAgent.getPropertyValue(\"cBG\")))!\u003dnull){\n\t\t\t\t\t((Agent)(currentAgent.getPropertyValue(\"cBG\"))).setPropertyValue(\"N\",(int)(((Agent)(currentAgent.getPropertyValue(\"cBG\"))).getPropertyValue(\"N\"))-1);\n\t\t\t\t\tif((int)(currentAgent.getPropertyValue(\"status\"))\u003d\u003dstatusEnum.SUSCEPTIBLE.ordinal()){\n\t\t\t\t\t\t((Agent)(currentAgent.getPropertyValue(\"cBG\"))).setPropertyValue(\"S\",(int)(((Agent)(currentAgent.getPropertyValue(\"cBG\"))).getPropertyValue(\"S\"))-1);\n\t\t\t\t\t}else if((int)(currentAgent.getPropertyValue(\"status\"))\u003d\u003dstatusEnum.EXPOSED.ordinal()){\n\t\t\t\t\t\t((Agent)(currentAgent.getPropertyValue(\"cBG\"))).setPropertyValue(\"E\",(int)(((Agent)(currentAgent.getPropertyValue(\"cBG\"))).getPropertyValue(\"E\"))-1);\n\t\t\t\t\t}else if((int)(currentAgent.getPropertyValue(\"status\"))\u003d\u003dstatusEnum.INFECTED_SYM.ordinal()){\n\t\t\t\t\t\t((Agent)(currentAgent.getPropertyValue(\"cBG\"))).setPropertyValue(\"IS\",(int)(((Agent)(currentAgent.getPropertyValue(\"cBG\"))).getPropertyValue(\"IS\"))-1);\n\t\t\t\t\t}else if((int)(currentAgent.getPropertyValue(\"status\"))\u003d\u003dstatusEnum.INFECTED_ASYM.ordinal()){\n\t\t\t\t\t\t((Agent)(currentAgent.getPropertyValue(\"cBG\"))).setPropertyValue(\"IAS\",(int)(((Agent)(currentAgent.getPropertyValue(\"cBG\"))).getPropertyValue(\"IAS\"))-1);\n\t\t\t\t\t}else if((int)(currentAgent.getPropertyValue(\"status\"))\u003d\u003dstatusEnum.RECOVERED.ordinal()){\n\t\t\t\t\t\t((Agent)(currentAgent.getPropertyValue(\"cBG\"))).setPropertyValue(\"R\",(int)(((Agent)(currentAgent.getPropertyValue(\"cBG\"))).getPropertyValue(\"R\"))-1);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tfor(int n\u003d0;n\u003c((CopyOnWriteArrayList\u003cAgent\u003e)(((AgentBasedModel)(rootModel.getABM())).getAgents())).size();n++){\n\t\t\t\t\t//println(\"%%%\");\n\t\t\t\t\tif(((String)(((AgentTemplate)(((Agent)(((CopyOnWriteArrayList\u003cAgent\u003e)(((AgentBasedModel)(rootModel.getABM())).getAgents())).get(n))).getMyTemplate())).getAgentTypeName())).equals(\"CBG\")){\n\t\t\t\t\t\tif(currentLocation.getId()\u003d\u003d((CensusBlockGroup)(((Agent)(((CopyOnWriteArrayList\u003cAgent\u003e)(((AgentBasedModel)(rootModel.getABM())).getAgents())).get(n))).getPropertyValue(\"cbgVal\"))).getId()){\n\t\t\t\t\t\t\tcurrentAgent.setPropertyValue(\"cBG\", ((Agent)(((CopyOnWriteArrayList\u003cAgent\u003e)(((AgentBasedModel)(rootModel.getABM())).getAgents())).get(n))));\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif(((Agent)(currentAgent.getPropertyValue(\"cBG\")))!\u003dnull){\n\t\t\t\t\t((Agent)(currentAgent.getPropertyValue(\"cBG\"))).setPropertyValue(\"N\",(int)(((Agent)(currentAgent.getPropertyValue(\"cBG\"))).getPropertyValue(\"N\"))+1);\n\t\t\t\t\tif((int)(currentAgent.getPropertyValue(\"status\"))\u003d\u003dstatusEnum.SUSCEPTIBLE.ordinal()){\n\t\t\t\t\t\t((Agent)(currentAgent.getPropertyValue(\"cBG\"))).setPropertyValue(\"S\",(int)(((Agent)(currentAgent.getPropertyValue(\"cBG\"))).getPropertyValue(\"S\"))+1);\n\t\t\t\t\t}else if((int)(currentAgent.getPropertyValue(\"status\"))\u003d\u003dstatusEnum.EXPOSED.ordinal()){\n\t\t\t\t\t\t((Agent)(currentAgent.getPropertyValue(\"cBG\"))).setPropertyValue(\"E\",(int)(((Agent)(currentAgent.getPropertyValue(\"cBG\"))).getPropertyValue(\"E\"))+1);\n\t\t\t\t\t}else if((int)(currentAgent.getPropertyValue(\"status\"))\u003d\u003dstatusEnum.INFECTED_SYM.ordinal()){\n\t\t\t\t\t\t((Agent)(currentAgent.getPropertyValue(\"cBG\"))).setPropertyValue(\"IS\",(int)(((Agent)(currentAgent.getPropertyValue(\"cBG\"))).getPropertyValue(\"IS\"))+1);\n\t\t\t\t\t}else if((int)(currentAgent.getPropertyValue(\"status\"))\u003d\u003dstatusEnum.INFECTED_ASYM.ordinal()){\n\t\t\t\t\t\t((Agent)(currentAgent.getPropertyValue(\"cBG\"))).setPropertyValue(\"IAS\",(int)(((Agent)(currentAgent.getPropertyValue(\"cBG\"))).getPropertyValue(\"IAS\"))+1);\n\t\t\t\t\t}else if((int)(currentAgent.getPropertyValue(\"status\"))\u003d\u003dstatusEnum.RECOVERED.ordinal()){\n\t\t\t\t\t\t((Agent)(currentAgent.getPropertyValue(\"cBG\"))).setPropertyValue(\"R\",(int)(((Agent)(currentAgent.getPropertyValue(\"cBG\"))).getPropertyValue(\"R\"))+1);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t\n\t\t\t\t//println(\"returnFromWork\");\n\t\t\t}\n\t\t}\n\t\t//^^^ RETURN FROM WORK\n\t}\n}\n\nif(((int)currentAgent.getPropertyValue(\"status\"))\u003d\u003dstatusEnum.INFECTED_SYM.ordinal() || ((int)currentAgent.getPropertyValue(\"status\"))\u003d\u003dstatusEnum.INFECTED_ASYM.ordinal()){//if infected\n\tif(((int)currentAgent.getPropertyValue(\"minutesSick\"))\u003d\u003d-1){\n\t\tcurrentAgent.setPropertyValue(\"minutesSick\",1);\n\t\tif(Math.random()\u003c0.02){//0.0018\n\t\t\tcurrentAgent.setPropertyValue(\"isDestinedToDeath\",true);\n\t\t}else{\n\t\t\tcurrentAgent.setPropertyValue(\"isDestinedToDeath\",false);\n\t\t}\n\t}else{\n\t\tint minsSick\u003d((int)currentAgent.getPropertyValue(\"minutesSick\"));\n\t\tcurrentAgent.setPropertyValue(\"minutesSick\",minsSick+1);\n\t\tif(currentAgent.getPropertyValue(\"isDestinedToDeath\")\u003d\u003dfalse){\n\t\t\tif(minsSick\u003e20160){\n\t\t\t\tif(Math.random()\u003cMath.pow((double)(minsSick-30240)/(double)(30240),5)){\n\t\t\t\t\tcurrentAgent.setPropertyValue(\"minutesSick\",-1);\n\t\t\t\t\tcurrentAgent.setPropertyValue(\"status\",statusEnum.RECOVERED.ordinal());//RECOVERED\n\t\t\t\t}\n\t\t\t}\n\t\t}else{\n\t\t\tif(minsSick\u003e10080){\n\t\t\t\tif(Math.random()\u003cMath.pow((double)(minsSick-20160)/(double)(20160),5)){\n\t\t\t\t\tcurrentAgent.setPropertyValue(\"minutesSick\",-1);\n\t\t\t\t\tcurrentAgent.setPropertyValue(\"status\",statusEnum.DEAD.ordinal());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\nif((int)(currentAgent.getPropertyValue(\"dstIndex\"))!\u003d-1 || (boolean)(currentAgent.getPropertyValue(\"isAtWork\"))\u003d\u003dtrue){\n\tif((int)(currentAgent.getPropertyValue(\"status\"))\u003d\u003dstatusEnum.SUSCEPTIBLE.ordinal()){\n\t\tcurrentAgent.setPropertyValue(\"status\",statusEnum.EXPOSED.ordinal());//NOW EXPOSED\n\t}\n}\n\nif((int)(currentAgent.getPropertyValue(\"status\"))\u003d\u003dstatusEnum.EXPOSED.ordinal()){\n\tif(((Agent)(currentAgent.getPropertyValue(\"cBG\")))!\u003dnull){\n\t\tint numIS\u003d(int)(((Agent)(currentAgent.getPropertyValue(\"cBG\"))).getPropertyValue(\"IS\"));\n\t\tint numIAS\u003d(int)(((Agent)(currentAgent.getPropertyValue(\"cBG\"))).getPropertyValue(\"IAS\"));\n\t\tint N\u003d(int)(((Agent)(currentAgent.getPropertyValue(\"cBG\"))).getPropertyValue(\"N\"));\n\t\tif(Math.random()\u003c(((float)(numIS+numIAS)/(float)(N)))*0.00002f){\n\t\t\tif(Math.random()\u003e0.7){\n\t\t\t\tcurrentAgent.setPropertyValue(\"status\",statusEnum.INFECTED_ASYM.ordinal());\n\t\t\t\tcurrentAgent.setPropertyValue(\"minutesSick\",-1);\n\t\t\t}else{\n\t\t\t\tcurrentAgent.setPropertyValue(\"status\",statusEnum.INFECTED_SYM.ordinal());\n\t\t\t\tcurrentAgent.setPropertyValue(\"minutesSick\",-1);\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n}\n"
        },
        "pythonScript": {
          "script": ""
        },
        "isJavaScriptActive": true
      },
      "canRunBehaviorParallel": false
    },
    {
      "agentTypeName": "Plotter",
      "statusNames": [
        "DEFAULT_UNKNOWN"
      ],
      "statusValues": [
        -1
      ],
      "agentProperties": [],
      "constructor": {
        "javaScript": {
          "script": ""
        },
        "pythonScript": {
          "script": "import matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax \u003d plt.subplots()  # Create a figure containing a single axes.\nax.plot([1, 2, 3, 4], [1, 4, 2, 3])  # Plot some data on the axes.",
          "generatedScriptLocation": "./tempPython_0.py"
        },
        "isJavaScriptActive": false
      },
      "destructor": {
        "javaScript": {
          "script": ""
        },
        "pythonScript": {
          "script": ""
        },
        "isJavaScriptActive": true
      },
      "behavior": {
        "javaScript": {
          "script": ""
        },
        "pythonScript": {
          "script": ""
        },
        "isJavaScriptActive": true
      },
      "canRunBehaviorParallel": false
    }
  ],
  "startTimeString": "2020-09-01T00:00Z[UTC]",
  "endTimeString": "2020-11-01T00:00Z[UTC]",
  "studyScope": "USA_NY_Richmond County_New York",
  "isReportContactRate": true,
  "isOurABMActive": true,
  "isShamilABMActive": true,
  "isAirQualityActive": false,
  "isPatternBasedTime": false
}